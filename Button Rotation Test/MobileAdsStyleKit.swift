//
//  MobileAdsStyleKit.swift
//  MobileAds
//
//  Created by Yung Dai on 2016-10-13.
//  Copyright Â© 2016 CIBC. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class MobileAdsStyleKit : NSObject {
    
    let greenViewColour: UIColor = #colorLiteral(red: 0.4549019608, green: 0.6588235294, blue: 0.3333333333, alpha: 1)
    let cibcRed: UIColor = #colorLiteral(red: 0.6878595948, green: 0.04617334902, blue: 0.1100673452, alpha: 1)
    let cibcYellow: UIColor = #colorLiteral(red: 0.9686274529, green: 0.78039217, blue: 0.3450980484, alpha: 1)
    

    //// Drawing Methods
    
    public dynamic class func drawPlusSymbol(plusFrame: CGRect = CGRect(x: 3, y: 3, width: 44, height: 44), colour: UIColor) {
        //// Color Declarations
        let fillColor = colour
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: plusFrame.minX + 0.68909 * plusFrame.width, y: plusFrame.minY + 0.45947 * plusFrame.height))
        bezierPath.addLine(to: CGPoint(x: plusFrame.minX + 0.68909 * plusFrame.width, y: plusFrame.minY + 0.52508 * plusFrame.height))
        bezierPath.addLine(to: CGPoint(x: plusFrame.minX + 0.52508 * plusFrame.width, y: plusFrame.minY + 0.52508 * plusFrame.height))
        bezierPath.addLine(to: CGPoint(x: plusFrame.minX + 0.52508 * plusFrame.width, y: plusFrame.minY + 0.68909 * plusFrame.height))
        bezierPath.addLine(to: CGPoint(x: plusFrame.minX + 0.45947 * plusFrame.width, y: plusFrame.minY + 0.68909 * plusFrame.height))
        bezierPath.addLine(to: CGPoint(x: plusFrame.minX + 0.45947 * plusFrame.width, y: plusFrame.minY + 0.52508 * plusFrame.height))
        bezierPath.addLine(to: CGPoint(x: plusFrame.minX + 0.29545 * plusFrame.width, y: plusFrame.minY + 0.52508 * plusFrame.height))
        bezierPath.addLine(to: CGPoint(x: plusFrame.minX + 0.29545 * plusFrame.width, y: plusFrame.minY + 0.45947 * plusFrame.height))
        bezierPath.addLine(to: CGPoint(x: plusFrame.minX + 0.45947 * plusFrame.width, y: plusFrame.minY + 0.45947 * plusFrame.height))
        bezierPath.addLine(to: CGPoint(x: plusFrame.minX + 0.45947 * plusFrame.width, y: plusFrame.minY + 0.29545 * plusFrame.height))
        bezierPath.addLine(to: CGPoint(x: plusFrame.minX + 0.52508 * plusFrame.width, y: plusFrame.minY + 0.29545 * plusFrame.height))
        bezierPath.addLine(to: CGPoint(x: plusFrame.minX + 0.52508 * plusFrame.width, y: plusFrame.minY + 0.45947 * plusFrame.height))
        bezierPath.addLine(to: CGPoint(x: plusFrame.minX + 0.68909 * plusFrame.width, y: plusFrame.minY + 0.45947 * plusFrame.height))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
    }
    
    public dynamic class func drawCheckMark(mark: CGRect = CGRect(x: 3, y: 3, width: 44, height: 44)) {
        //// Color Declarations
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: mark.minX + 0.73380 * mark.width, y: mark.minY + 0.34696 * mark.height))
        bezierPath.addCurve(to: CGPoint(x: mark.minX + 0.73580 * mark.width, y: mark.minY + 0.34107 * mark.height), controlPoint1: CGPoint(x: mark.minX + 0.73513 * mark.width, y: mark.minY + 0.34565 * mark.height), controlPoint2: CGPoint(x: mark.minX + 0.73580 * mark.width, y: mark.minY + 0.34369 * mark.height))
        bezierPath.addCurve(to: CGPoint(x: mark.minX + 0.73380 * mark.width, y: mark.minY + 0.33321 * mark.height), controlPoint1: CGPoint(x: mark.minX + 0.73580 * mark.width, y: mark.minY + 0.33714 * mark.height), controlPoint2: CGPoint(x: mark.minX + 0.73513 * mark.width, y: mark.minY + 0.33452 * mark.height))
        bezierPath.addLine(to: CGPoint(x: mark.minX + 0.67192 * mark.width, y: mark.minY + 0.28606 * mark.height))
        bezierPath.addCurve(to: CGPoint(x: mark.minX + 0.66394 * mark.width, y: mark.minY + 0.28409 * mark.height), controlPoint1: CGPoint(x: mark.minX + 0.67059 * mark.width, y: mark.minY + 0.28475 * mark.height), controlPoint2: CGPoint(x: mark.minX + 0.66793 * mark.width, y: mark.minY + 0.28409 * mark.height))
        bezierPath.addCurve(to: CGPoint(x: mark.minX + 0.65795 * mark.width, y: mark.minY + 0.28606 * mark.height), controlPoint1: CGPoint(x: mark.minX + 0.66128 * mark.width, y: mark.minY + 0.28409 * mark.height), controlPoint2: CGPoint(x: mark.minX + 0.65928 * mark.width, y: mark.minY + 0.28475 * mark.height))
        bezierPath.addLine(to: CGPoint(x: mark.minX + 0.43640 * mark.width, y: mark.minY + 0.56701 * mark.height))
        bezierPath.addCurve(to: CGPoint(x: mark.minX + 0.34658 * mark.width, y: mark.minY + 0.48253 * mark.height), controlPoint1: CGPoint(x: mark.minX + 0.37785 * mark.width, y: mark.minY + 0.51200 * mark.height), controlPoint2: CGPoint(x: mark.minX + 0.34791 * mark.width, y: mark.minY + 0.48384 * mark.height))
        bezierPath.addCurve(to: CGPoint(x: mark.minX + 0.33460 * mark.width, y: mark.minY + 0.47664 * mark.height), controlPoint1: CGPoint(x: mark.minX + 0.34259 * mark.width, y: mark.minY + 0.47860 * mark.height), controlPoint2: CGPoint(x: mark.minX + 0.33859 * mark.width, y: mark.minY + 0.47664 * mark.height))
        bezierPath.addCurve(to: CGPoint(x: mark.minX + 0.32662 * mark.width, y: mark.minY + 0.48253 * mark.height), controlPoint1: CGPoint(x: mark.minX + 0.33327 * mark.width, y: mark.minY + 0.47664 * mark.height), controlPoint2: CGPoint(x: mark.minX + 0.33061 * mark.width, y: mark.minY + 0.47860 * mark.height))
        bezierPath.addLine(to: CGPoint(x: mark.minX + 0.27672 * mark.width, y: mark.minY + 0.53165 * mark.height))
        bezierPath.addLine(to: CGPoint(x: mark.minX + 0.27472 * mark.width, y: mark.minY + 0.53361 * mark.height))
        bezierPath.addCurve(to: CGPoint(x: mark.minX + 0.27273 * mark.width, y: mark.minY + 0.54147 * mark.height), controlPoint1: CGPoint(x: mark.minX + 0.27339 * mark.width, y: mark.minY + 0.53492 * mark.height), controlPoint2: CGPoint(x: mark.minX + 0.27273 * mark.width, y: mark.minY + 0.53754 * mark.height))
        bezierPath.addCurve(to: CGPoint(x: mark.minX + 0.27472 * mark.width, y: mark.minY + 0.54737 * mark.height), controlPoint1: CGPoint(x: mark.minX + 0.27273 * mark.width, y: mark.minY + 0.54409 * mark.height), controlPoint2: CGPoint(x: mark.minX + 0.27339 * mark.width, y: mark.minY + 0.54606 * mark.height))
        bezierPath.addLine(to: CGPoint(x: mark.minX + 0.27872 * mark.width, y: mark.minY + 0.54933 * mark.height))
        bezierPath.addCurve(to: CGPoint(x: mark.minX + 0.43640 * mark.width, y: mark.minY + 0.69865 * mark.height), controlPoint1: CGPoint(x: mark.minX + 0.38251 * mark.width, y: mark.minY + 0.64757 * mark.height), controlPoint2: CGPoint(x: mark.minX + 0.43507 * mark.width, y: mark.minY + 0.69734 * mark.height))
        bezierPath.addCurve(to: CGPoint(x: mark.minX + 0.44638 * mark.width, y: mark.minY + 0.70455 * mark.height), controlPoint1: CGPoint(x: mark.minX + 0.44039 * mark.width, y: mark.minY + 0.70258 * mark.height), controlPoint2: CGPoint(x: mark.minX + 0.44372 * mark.width, y: mark.minY + 0.70455 * mark.height))
        bezierPath.addCurve(to: CGPoint(x: mark.minX + 0.45636 * mark.width, y: mark.minY + 0.69865 * mark.height), controlPoint1: CGPoint(x: mark.minX + 0.44904 * mark.width, y: mark.minY + 0.70455 * mark.height), controlPoint2: CGPoint(x: mark.minX + 0.45237 * mark.width, y: mark.minY + 0.70258 * mark.height))
        bezierPath.addLine(to: CGPoint(x: mark.minX + 0.73380 * mark.width, y: mark.minY + 0.34696 * mark.height))
        bezierPath.close()
        white.setFill()
        bezierPath.fill()
    }
    
    public dynamic class func drawGreenCheckMark(mark: CGRect = CGRect(x: 3, y: 3, width: 44, height: 44)) {
        //// Color Declarations
        let green: UIColor = #colorLiteral(red: 0.1947776973, green: 0.679569304, blue: 0.3254360557, alpha: 1)
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: mark.minX + 0.73380 * mark.width, y: mark.minY + 0.34696 * mark.height))
        bezierPath.addCurve(to: CGPoint(x: mark.minX + 0.73580 * mark.width, y: mark.minY + 0.34107 * mark.height), controlPoint1: CGPoint(x: mark.minX + 0.73513 * mark.width, y: mark.minY + 0.34565 * mark.height), controlPoint2: CGPoint(x: mark.minX + 0.73580 * mark.width, y: mark.minY + 0.34369 * mark.height))
        bezierPath.addCurve(to: CGPoint(x: mark.minX + 0.73380 * mark.width, y: mark.minY + 0.33321 * mark.height), controlPoint1: CGPoint(x: mark.minX + 0.73580 * mark.width, y: mark.minY + 0.33714 * mark.height), controlPoint2: CGPoint(x: mark.minX + 0.73513 * mark.width, y: mark.minY + 0.33452 * mark.height))
        bezierPath.addLine(to: CGPoint(x: mark.minX + 0.67192 * mark.width, y: mark.minY + 0.28606 * mark.height))
        bezierPath.addCurve(to: CGPoint(x: mark.minX + 0.66394 * mark.width, y: mark.minY + 0.28409 * mark.height), controlPoint1: CGPoint(x: mark.minX + 0.67059 * mark.width, y: mark.minY + 0.28475 * mark.height), controlPoint2: CGPoint(x: mark.minX + 0.66793 * mark.width, y: mark.minY + 0.28409 * mark.height))
        bezierPath.addCurve(to: CGPoint(x: mark.minX + 0.65795 * mark.width, y: mark.minY + 0.28606 * mark.height), controlPoint1: CGPoint(x: mark.minX + 0.66128 * mark.width, y: mark.minY + 0.28409 * mark.height), controlPoint2: CGPoint(x: mark.minX + 0.65928 * mark.width, y: mark.minY + 0.28475 * mark.height))
        bezierPath.addLine(to: CGPoint(x: mark.minX + 0.43640 * mark.width, y: mark.minY + 0.56701 * mark.height))
        bezierPath.addCurve(to: CGPoint(x: mark.minX + 0.34658 * mark.width, y: mark.minY + 0.48253 * mark.height), controlPoint1: CGPoint(x: mark.minX + 0.37785 * mark.width, y: mark.minY + 0.51200 * mark.height), controlPoint2: CGPoint(x: mark.minX + 0.34791 * mark.width, y: mark.minY + 0.48384 * mark.height))
        bezierPath.addCurve(to: CGPoint(x: mark.minX + 0.33460 * mark.width, y: mark.minY + 0.47664 * mark.height), controlPoint1: CGPoint(x: mark.minX + 0.34259 * mark.width, y: mark.minY + 0.47860 * mark.height), controlPoint2: CGPoint(x: mark.minX + 0.33859 * mark.width, y: mark.minY + 0.47664 * mark.height))
        bezierPath.addCurve(to: CGPoint(x: mark.minX + 0.32662 * mark.width, y: mark.minY + 0.48253 * mark.height), controlPoint1: CGPoint(x: mark.minX + 0.33327 * mark.width, y: mark.minY + 0.47664 * mark.height), controlPoint2: CGPoint(x: mark.minX + 0.33061 * mark.width, y: mark.minY + 0.47860 * mark.height))
        bezierPath.addLine(to: CGPoint(x: mark.minX + 0.27672 * mark.width, y: mark.minY + 0.53165 * mark.height))
        bezierPath.addLine(to: CGPoint(x: mark.minX + 0.27472 * mark.width, y: mark.minY + 0.53361 * mark.height))
        bezierPath.addCurve(to: CGPoint(x: mark.minX + 0.27273 * mark.width, y: mark.minY + 0.54147 * mark.height), controlPoint1: CGPoint(x: mark.minX + 0.27339 * mark.width, y: mark.minY + 0.53492 * mark.height), controlPoint2: CGPoint(x: mark.minX + 0.27273 * mark.width, y: mark.minY + 0.53754 * mark.height))
        bezierPath.addCurve(to: CGPoint(x: mark.minX + 0.27472 * mark.width, y: mark.minY + 0.54737 * mark.height), controlPoint1: CGPoint(x: mark.minX + 0.27273 * mark.width, y: mark.minY + 0.54409 * mark.height), controlPoint2: CGPoint(x: mark.minX + 0.27339 * mark.width, y: mark.minY + 0.54606 * mark.height))
        bezierPath.addLine(to: CGPoint(x: mark.minX + 0.27872 * mark.width, y: mark.minY + 0.54933 * mark.height))
        bezierPath.addCurve(to: CGPoint(x: mark.minX + 0.43640 * mark.width, y: mark.minY + 0.69865 * mark.height), controlPoint1: CGPoint(x: mark.minX + 0.38251 * mark.width, y: mark.minY + 0.64757 * mark.height), controlPoint2: CGPoint(x: mark.minX + 0.43507 * mark.width, y: mark.minY + 0.69734 * mark.height))
        bezierPath.addCurve(to: CGPoint(x: mark.minX + 0.44638 * mark.width, y: mark.minY + 0.70455 * mark.height), controlPoint1: CGPoint(x: mark.minX + 0.44039 * mark.width, y: mark.minY + 0.70258 * mark.height), controlPoint2: CGPoint(x: mark.minX + 0.44372 * mark.width, y: mark.minY + 0.70455 * mark.height))
        bezierPath.addCurve(to: CGPoint(x: mark.minX + 0.45636 * mark.width, y: mark.minY + 0.69865 * mark.height), controlPoint1: CGPoint(x: mark.minX + 0.44904 * mark.width, y: mark.minY + 0.70455 * mark.height), controlPoint2: CGPoint(x: mark.minX + 0.45237 * mark.width, y: mark.minY + 0.70258 * mark.height))
        bezierPath.addLine(to: CGPoint(x: mark.minX + 0.73380 * mark.width, y: mark.minY + 0.34696 * mark.height))
        bezierPath.close()
        green.setFill()
        bezierPath.fill()
    }

    
    
    public dynamic class func drawCross(crossFrame: CGRect = CGRect(x: 3, y: 3, width: 44, height: 44)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }
        
        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        
        
        //// Subframes
        let group3: CGRect = CGRect(x: crossFrame.minX + fastFloor((crossFrame.width - 17.32) * 0.49435 + 0.31) + 0.19, y: crossFrame.minY + fastFloor((crossFrame.height - 17.32) * 0.49435 + 0.31) + 0.19, width: 17.32, height: 17.32)
        
        
        //// Group 3
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: group3.minX + 17.32, y: group3.minY + 14.85))
        clipPath.addLine(to: CGPoint(x: group3.minX + 14.85, y: group3.minY + 17.32))
        clipPath.addLine(to: CGPoint(x: group3.minX + 8.66, y: group3.minY + 11.14))
        clipPath.addLine(to: CGPoint(x: group3.minX + 2.47, y: group3.minY + 17.32))
        clipPath.addLine(to: CGPoint(x: group3.minX, y: group3.minY + 14.85))
        clipPath.addLine(to: CGPoint(x: group3.minX + 6.19, y: group3.minY + 8.66))
        clipPath.addLine(to: CGPoint(x: group3.minX, y: group3.minY + 2.47))
        clipPath.addLine(to: CGPoint(x: group3.minX + 2.47, y: group3.minY))
        clipPath.addLine(to: CGPoint(x: group3.minX + 8.66, y: group3.minY + 6.19))
        clipPath.addLine(to: CGPoint(x: group3.minX + 14.85, y: group3.minY))
        clipPath.addLine(to: CGPoint(x: group3.minX + 17.32, y: group3.minY + 2.47))
        clipPath.addLine(to: CGPoint(x: group3.minX + 11.14, y: group3.minY + 8.66))
        clipPath.addLine(to: CGPoint(x: group3.minX + 17.32, y: group3.minY + 14.85))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()
        
        
        //// Rectangle Drawing
        context.saveGState()
        context.translateBy(x: group3.minX + 8.73, y: group3.minY + 8.89)
        context.rotate(by: -45 * CGFloat.pi/180)
        
        let rectanglePath = UIBezierPath(rect: CGRect(x: -15.5, y: -15.5, width: 31, height: 31))
        fillColor.setFill()
        rectanglePath.fill()
        
        context.restoreGState()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
    }
    
    public dynamic class func drawSearchMagnify(magnifyingGlassFrame: CGRect = CGRect(x: 3, y: 3, width: 44, height: 44)) {
        //// Color Declarations
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: magnifyingGlassFrame.minX + 0.61974 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.57521 * magnifyingGlassFrame.height))
        bezierPath.addLine(to: CGPoint(x: magnifyingGlassFrame.minX + 0.76818 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.72365 * magnifyingGlassFrame.height))
        bezierPath.addLine(to: CGPoint(x: magnifyingGlassFrame.minX + 0.72365 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.76818 * magnifyingGlassFrame.height))
        bezierPath.addLine(to: CGPoint(x: magnifyingGlassFrame.minX + 0.57656 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.61974 * magnifyingGlassFrame.height))
        bezierPath.addLine(to: CGPoint(x: magnifyingGlassFrame.minX + 0.57656 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.59680 * magnifyingGlassFrame.height))
        bezierPath.addLine(to: CGPoint(x: magnifyingGlassFrame.minX + 0.56712 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.58871 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.44162 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.63459 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.53113 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.61929 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.48930 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.63459 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.30600 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.57859 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.38854 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.63459 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.34334 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.61592 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.25000 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.44297 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.26867 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.54125 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.25000 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.49605 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.30600 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.30668 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.25000 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.38989 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.26867 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.34446 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.44027 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.25000 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.34334 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.26889 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.38809 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.25000 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.57589 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.30668 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.49335 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.25000 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.53855 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.26889 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.63189 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.44297 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.61322 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.34446 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.63189 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.38989 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.58601 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.56847 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.63189 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.49065 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.61660 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.53248 * magnifyingGlassFrame.height))
        bezierPath.addLine(to: CGPoint(x: magnifyingGlassFrame.minX + 0.59545 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.57521 * magnifyingGlassFrame.height))
        bezierPath.addLine(to: CGPoint(x: magnifyingGlassFrame.minX + 0.61974 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.57521 * magnifyingGlassFrame.height))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: magnifyingGlassFrame.minX + 0.44162 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.57521 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.53608 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.53675 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.47850 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.57521 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.50999 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.56239 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.57521 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.44297 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.56217 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.51111 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.57521 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.47985 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.53608 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.34851 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.57521 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.40608 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.56217 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.37460 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.44162 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.30938 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.50999 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.32242 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.47850 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.30938 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.34783 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.34851 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.40473 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.30938 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.37347 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.32242 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.30938 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.44297 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.32219 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.37460 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.30938 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.40608 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.34783 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.53675 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.30938 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.47985 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.32219 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.51111 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.44162 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.57521 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.37347 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.56239 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.40473 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.57521 * magnifyingGlassFrame.height))
        bezierPath.addLine(to: CGPoint(x: magnifyingGlassFrame.minX + 0.44162 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.57521 * magnifyingGlassFrame.height))
        bezierPath.close()
        white.setFill()
        bezierPath.fill()
    }
    
    public dynamic class func drawCreditCardOutline(cardOutline: CGRect = CGRect(x: 2.91, y: 2.49, width: 44.57, height: 44.57)) {
        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: cardOutline.minX + 0.90584 * cardOutline.width, y: cardOutline.minY + 0.11039 * cardOutline.height))
        bezierPath.addLine(to: CGPoint(x: cardOutline.minX + 0.09416 * cardOutline.width, y: cardOutline.minY + 0.11039 * cardOutline.height))
        bezierPath.addCurve(to: CGPoint(x: cardOutline.minX + 0.01299 * cardOutline.width, y: cardOutline.minY + 0.19156 * cardOutline.height), controlPoint1: CGPoint(x: cardOutline.minX + 0.04951 * cardOutline.width, y: cardOutline.minY + 0.11039 * cardOutline.height), controlPoint2: CGPoint(x: cardOutline.minX + 0.01299 * cardOutline.width, y: cardOutline.minY + 0.14692 * cardOutline.height))
        bezierPath.addLine(to: CGPoint(x: cardOutline.minX + 0.01299 * cardOutline.width, y: cardOutline.minY + 0.80844 * cardOutline.height))
        bezierPath.addCurve(to: CGPoint(x: cardOutline.minX + 0.09416 * cardOutline.width, y: cardOutline.minY + 0.88961 * cardOutline.height), controlPoint1: CGPoint(x: cardOutline.minX + 0.01299 * cardOutline.width, y: cardOutline.minY + 0.85308 * cardOutline.height), controlPoint2: CGPoint(x: cardOutline.minX + 0.04951 * cardOutline.width, y: cardOutline.minY + 0.88961 * cardOutline.height))
        bezierPath.addLine(to: CGPoint(x: cardOutline.minX + 0.90584 * cardOutline.width, y: cardOutline.minY + 0.88961 * cardOutline.height))
        bezierPath.addCurve(to: CGPoint(x: cardOutline.minX + 0.98701 * cardOutline.width, y: cardOutline.minY + 0.80844 * cardOutline.height), controlPoint1: CGPoint(x: cardOutline.minX + 0.95049 * cardOutline.width, y: cardOutline.minY + 0.88961 * cardOutline.height), controlPoint2: CGPoint(x: cardOutline.minX + 0.98701 * cardOutline.width, y: cardOutline.minY + 0.85308 * cardOutline.height))
        bezierPath.addLine(to: CGPoint(x: cardOutline.minX + 0.98701 * cardOutline.width, y: cardOutline.minY + 0.19156 * cardOutline.height))
        bezierPath.addCurve(to: CGPoint(x: cardOutline.minX + 0.90584 * cardOutline.width, y: cardOutline.minY + 0.11039 * cardOutline.height), controlPoint1: CGPoint(x: cardOutline.minX + 0.98701 * cardOutline.width, y: cardOutline.minY + 0.14692 * cardOutline.height), controlPoint2: CGPoint(x: cardOutline.minX + 0.95049 * cardOutline.width, y: cardOutline.minY + 0.11039 * cardOutline.height))
        bezierPath.addLine(to: CGPoint(x: cardOutline.minX + 0.90584 * cardOutline.width, y: cardOutline.minY + 0.11039 * cardOutline.height))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: cardOutline.minX + 0.09416 * cardOutline.width, y: cardOutline.minY + 0.17532 * cardOutline.height))
        bezierPath.addLine(to: CGPoint(x: cardOutline.minX + 0.90584 * cardOutline.width, y: cardOutline.minY + 0.17532 * cardOutline.height))
        bezierPath.addCurve(to: CGPoint(x: cardOutline.minX + 0.92208 * cardOutline.width, y: cardOutline.minY + 0.19156 * cardOutline.height), controlPoint1: CGPoint(x: cardOutline.minX + 0.91447 * cardOutline.width, y: cardOutline.minY + 0.17532 * cardOutline.height), controlPoint2: CGPoint(x: cardOutline.minX + 0.92208 * cardOutline.width, y: cardOutline.minY + 0.18293 * cardOutline.height))
        bezierPath.addLine(to: CGPoint(x: cardOutline.minX + 0.92208 * cardOutline.width, y: cardOutline.minY + 0.30519 * cardOutline.height))
        bezierPath.addLine(to: CGPoint(x: cardOutline.minX + 0.07792 * cardOutline.width, y: cardOutline.minY + 0.30519 * cardOutline.height))
        bezierPath.addLine(to: CGPoint(x: cardOutline.minX + 0.07792 * cardOutline.width, y: cardOutline.minY + 0.19156 * cardOutline.height))
        bezierPath.addCurve(to: CGPoint(x: cardOutline.minX + 0.09416 * cardOutline.width, y: cardOutline.minY + 0.17532 * cardOutline.height), controlPoint1: CGPoint(x: cardOutline.minX + 0.07792 * cardOutline.width, y: cardOutline.minY + 0.18293 * cardOutline.height), controlPoint2: CGPoint(x: cardOutline.minX + 0.08553 * cardOutline.width, y: cardOutline.minY + 0.17532 * cardOutline.height))
        bezierPath.addLine(to: CGPoint(x: cardOutline.minX + 0.09416 * cardOutline.width, y: cardOutline.minY + 0.17532 * cardOutline.height))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: cardOutline.minX + 0.90584 * cardOutline.width, y: cardOutline.minY + 0.82468 * cardOutline.height))
        bezierPath.addLine(to: CGPoint(x: cardOutline.minX + 0.09416 * cardOutline.width, y: cardOutline.minY + 0.82468 * cardOutline.height))
        bezierPath.addCurve(to: CGPoint(x: cardOutline.minX + 0.07792 * cardOutline.width, y: cardOutline.minY + 0.80844 * cardOutline.height), controlPoint1: CGPoint(x: cardOutline.minX + 0.08553 * cardOutline.width, y: cardOutline.minY + 0.82468 * cardOutline.height), controlPoint2: CGPoint(x: cardOutline.minX + 0.07792 * cardOutline.width, y: cardOutline.minY + 0.81707 * cardOutline.height))
        bezierPath.addLine(to: CGPoint(x: cardOutline.minX + 0.07792 * cardOutline.width, y: cardOutline.minY + 0.50000 * cardOutline.height))
        bezierPath.addLine(to: CGPoint(x: cardOutline.minX + 0.92208 * cardOutline.width, y: cardOutline.minY + 0.50000 * cardOutline.height))
        bezierPath.addLine(to: CGPoint(x: cardOutline.minX + 0.92208 * cardOutline.width, y: cardOutline.minY + 0.80844 * cardOutline.height))
        bezierPath.addCurve(to: CGPoint(x: cardOutline.minX + 0.90584 * cardOutline.width, y: cardOutline.minY + 0.82468 * cardOutline.height), controlPoint1: CGPoint(x: cardOutline.minX + 0.92208 * cardOutline.width, y: cardOutline.minY + 0.81707 * cardOutline.height), controlPoint2: CGPoint(x: cardOutline.minX + 0.91447 * cardOutline.width, y: cardOutline.minY + 0.82468 * cardOutline.height))
        bezierPath.addLine(to: CGPoint(x: cardOutline.minX + 0.90584 * cardOutline.width, y: cardOutline.minY + 0.82468 * cardOutline.height))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: cardOutline.minX + 0.14286 * cardOutline.width, y: cardOutline.minY + 0.75974 * cardOutline.height))
        bezierPath.addLine(to: CGPoint(x: cardOutline.minX + 0.27273 * cardOutline.width, y: cardOutline.minY + 0.75974 * cardOutline.height))
        bezierPath.addLine(to: CGPoint(x: cardOutline.minX + 0.27273 * cardOutline.width, y: cardOutline.minY + 0.69481 * cardOutline.height))
        bezierPath.addLine(to: CGPoint(x: cardOutline.minX + 0.14286 * cardOutline.width, y: cardOutline.minY + 0.69481 * cardOutline.height))
        bezierPath.addLine(to: CGPoint(x: cardOutline.minX + 0.14286 * cardOutline.width, y: cardOutline.minY + 0.75974 * cardOutline.height))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: cardOutline.minX + 0.33766 * cardOutline.width, y: cardOutline.minY + 0.75974 * cardOutline.height))
        bezierPath.addLine(to: CGPoint(x: cardOutline.minX + 0.53247 * cardOutline.width, y: cardOutline.minY + 0.75974 * cardOutline.height))
        bezierPath.addLine(to: CGPoint(x: cardOutline.minX + 0.53247 * cardOutline.width, y: cardOutline.minY + 0.69481 * cardOutline.height))
        bezierPath.addLine(to: CGPoint(x: cardOutline.minX + 0.33766 * cardOutline.width, y: cardOutline.minY + 0.69481 * cardOutline.height))
        bezierPath.addLine(to: CGPoint(x: cardOutline.minX + 0.33766 * cardOutline.width, y: cardOutline.minY + 0.75974 * cardOutline.height))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
    }
    
    public dynamic class func drawShieldOutline(shield: CGRect = CGRect(x: 2.91, y: 2.49, width: 44.57, height: 44.57)) {
        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: shield.minX + 0.72435 * shield.width, y: shield.minY + 0.53205 * shield.height))
        bezierPath.addCurve(to: CGPoint(x: shield.minX + 0.60666 * shield.width, y: shield.minY + 0.71235 * shield.height), controlPoint1: CGPoint(x: shield.minX + 0.72435 * shield.width, y: shield.minY + 0.60467 * shield.height), controlPoint2: CGPoint(x: shield.minX + 0.66025 * shield.width, y: shield.minY + 0.67028 * shield.height))
        bezierPath.addCurve(to: CGPoint(x: shield.minX + 0.50000 * shield.width, y: shield.minY + 0.78096 * shield.height), controlPoint1: CGPoint(x: shield.minX + 0.56660 * shield.width, y: shield.minY + 0.74390 * shield.height), controlPoint2: CGPoint(x: shield.minX + 0.52554 * shield.width, y: shield.minY + 0.76744 * shield.height))
        bezierPath.addLine(to: CGPoint(x: shield.minX + 0.50000 * shield.width, y: shield.minY + 0.21153 * shield.height))
        bezierPath.addLine(to: CGPoint(x: shield.minX + 0.72435 * shield.width, y: shield.minY + 0.21153 * shield.height))
        bezierPath.addLine(to: CGPoint(x: shield.minX + 0.72435 * shield.width, y: shield.minY + 0.53205 * shield.height))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: shield.minX + 0.82049 * shield.width, y: shield.minY + 0.14742 * shield.height))
        bezierPath.addCurve(to: CGPoint(x: shield.minX + 0.78844 * shield.width, y: shield.minY + 0.11537 * shield.height), controlPoint1: CGPoint(x: shield.minX + 0.82049 * shield.width, y: shield.minY + 0.12990 * shield.height), controlPoint2: CGPoint(x: shield.minX + 0.80597 * shield.width, y: shield.minY + 0.11537 * shield.height))
        bezierPath.addLine(to: CGPoint(x: shield.minX + 0.21156 * shield.width, y: shield.minY + 0.11537 * shield.height))
        bezierPath.addCurve(to: CGPoint(x: shield.minX + 0.17951 * shield.width, y: shield.minY + 0.14742 * shield.height), controlPoint1: CGPoint(x: shield.minX + 0.19403 * shield.width, y: shield.minY + 0.11537 * shield.height), controlPoint2: CGPoint(x: shield.minX + 0.17951 * shield.width, y: shield.minY + 0.12990 * shield.height))
        bezierPath.addLine(to: CGPoint(x: shield.minX + 0.17951 * shield.width, y: shield.minY + 0.53205 * shield.height))
        bezierPath.addCurve(to: CGPoint(x: shield.minX + 0.48698 * shield.width, y: shield.minY + 0.88162 * shield.height), controlPoint1: CGPoint(x: shield.minX + 0.17951 * shield.width, y: shield.minY + 0.74290 * shield.height), controlPoint2: CGPoint(x: shield.minX + 0.47446 * shield.width, y: shield.minY + 0.87611 * shield.height))
        bezierPath.addCurve(to: CGPoint(x: shield.minX + 0.50000 * shield.width, y: shield.minY + 0.88463 * shield.height), controlPoint1: CGPoint(x: shield.minX + 0.49099 * shield.width, y: shield.minY + 0.88363 * shield.height), controlPoint2: CGPoint(x: shield.minX + 0.49549 * shield.width, y: shield.minY + 0.88463 * shield.height))
        bezierPath.addCurve(to: CGPoint(x: shield.minX + 0.51302 * shield.width, y: shield.minY + 0.88162 * shield.height), controlPoint1: CGPoint(x: shield.minX + 0.50451 * shield.width, y: shield.minY + 0.88463 * shield.height), controlPoint2: CGPoint(x: shield.minX + 0.50901 * shield.width, y: shield.minY + 0.88363 * shield.height))
        bezierPath.addCurve(to: CGPoint(x: shield.minX + 0.82049 * shield.width, y: shield.minY + 0.53205 * shield.height), controlPoint1: CGPoint(x: shield.minX + 0.52554 * shield.width, y: shield.minY + 0.87611 * shield.height), controlPoint2: CGPoint(x: shield.minX + 0.82049 * shield.width, y: shield.minY + 0.74290 * shield.height))
        bezierPath.addLine(to: CGPoint(x: shield.minX + 0.82049 * shield.width, y: shield.minY + 0.14742 * shield.height))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
    }
    
    public dynamic class func drawSettingsSliders(slider: CGRect = CGRect(x: 2.91, y: 2.49, width: 44.57, height: 44.57)) {
        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: slider.minX + 0.31251 * slider.width, y: slider.minY + 0.70193 * slider.height))
        bezierPath.addLine(to: CGPoint(x: slider.minX + 0.15387 * slider.width, y: slider.minY + 0.70193 * slider.height))
        bezierPath.addLine(to: CGPoint(x: slider.minX + 0.15387 * slider.width, y: slider.minY + 0.75962 * slider.height))
        bezierPath.addLine(to: CGPoint(x: slider.minX + 0.31251 * slider.width, y: slider.minY + 0.75962 * slider.height))
        bezierPath.addLine(to: CGPoint(x: slider.minX + 0.31251 * slider.width, y: slider.minY + 0.70193 * slider.height))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: slider.minX + 0.47116 * slider.width, y: slider.minY + 0.64424 * slider.height))
        bezierPath.addLine(to: CGPoint(x: slider.minX + 0.35578 * slider.width, y: slider.minY + 0.64424 * slider.height))
        bezierPath.addCurve(to: CGPoint(x: slider.minX + 0.32693 * slider.width, y: slider.minY + 0.67308 * slider.height), controlPoint1: CGPoint(x: slider.minX + 0.34000 * slider.width, y: slider.minY + 0.64424 * slider.height), controlPoint2: CGPoint(x: slider.minX + 0.32693 * slider.width, y: slider.minY + 0.65731 * slider.height))
        bezierPath.addLine(to: CGPoint(x: slider.minX + 0.32693 * slider.width, y: slider.minY + 0.78847 * slider.height))
        bezierPath.addCurve(to: CGPoint(x: slider.minX + 0.35578 * slider.width, y: slider.minY + 0.81732 * slider.height), controlPoint1: CGPoint(x: slider.minX + 0.32693 * slider.width, y: slider.minY + 0.80425 * slider.height), controlPoint2: CGPoint(x: slider.minX + 0.34000 * slider.width, y: slider.minY + 0.81732 * slider.height))
        bezierPath.addLine(to: CGPoint(x: slider.minX + 0.47116 * slider.width, y: slider.minY + 0.81732 * slider.height))
        bezierPath.addCurve(to: CGPoint(x: slider.minX + 0.50000 * slider.width, y: slider.minY + 0.78847 * slider.height), controlPoint1: CGPoint(x: slider.minX + 0.48693 * slider.width, y: slider.minY + 0.81732 * slider.height), controlPoint2: CGPoint(x: slider.minX + 0.50000 * slider.width, y: slider.minY + 0.80425 * slider.height))
        bezierPath.addLine(to: CGPoint(x: slider.minX + 0.50000 * slider.width, y: slider.minY + 0.67308 * slider.height))
        bezierPath.addCurve(to: CGPoint(x: slider.minX + 0.47116 * slider.width, y: slider.minY + 0.64424 * slider.height), controlPoint1: CGPoint(x: slider.minX + 0.50000 * slider.width, y: slider.minY + 0.65731 * slider.height), controlPoint2: CGPoint(x: slider.minX + 0.48693 * slider.width, y: slider.minY + 0.64424 * slider.height))
        bezierPath.addLine(to: CGPoint(x: slider.minX + 0.47116 * slider.width, y: slider.minY + 0.64424 * slider.height))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: slider.minX + 0.54327 * slider.width, y: slider.minY + 0.47115 * slider.height))
        bezierPath.addLine(to: CGPoint(x: slider.minX + 0.15387 * slider.width, y: slider.minY + 0.47115 * slider.height))
        bezierPath.addLine(to: CGPoint(x: slider.minX + 0.15387 * slider.width, y: slider.minY + 0.52885 * slider.height))
        bezierPath.addLine(to: CGPoint(x: slider.minX + 0.54327 * slider.width, y: slider.minY + 0.52885 * slider.height))
        bezierPath.addLine(to: CGPoint(x: slider.minX + 0.54327 * slider.width, y: slider.minY + 0.47115 * slider.height))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: slider.minX + 0.25482 * slider.width, y: slider.minY + 0.24038 * slider.height))
        bezierPath.addLine(to: CGPoint(x: slider.minX + 0.15387 * slider.width, y: slider.minY + 0.24038 * slider.height))
        bezierPath.addLine(to: CGPoint(x: slider.minX + 0.15387 * slider.width, y: slider.minY + 0.29807 * slider.height))
        bezierPath.addLine(to: CGPoint(x: slider.minX + 0.25482 * slider.width, y: slider.minY + 0.29807 * slider.height))
        bezierPath.addLine(to: CGPoint(x: slider.minX + 0.25482 * slider.width, y: slider.minY + 0.24038 * slider.height))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: slider.minX + 0.84613 * slider.width, y: slider.minY + 0.70193 * slider.height))
        bezierPath.addLine(to: CGPoint(x: slider.minX + 0.51442 * slider.width, y: slider.minY + 0.70193 * slider.height))
        bezierPath.addLine(to: CGPoint(x: slider.minX + 0.51442 * slider.width, y: slider.minY + 0.75962 * slider.height))
        bezierPath.addLine(to: CGPoint(x: slider.minX + 0.84613 * slider.width, y: slider.minY + 0.75962 * slider.height))
        bezierPath.addLine(to: CGPoint(x: slider.minX + 0.84613 * slider.width, y: slider.minY + 0.70193 * slider.height))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: slider.minX + 0.41347 * slider.width, y: slider.minY + 0.18268 * slider.height))
        bezierPath.addLine(to: CGPoint(x: slider.minX + 0.29809 * slider.width, y: slider.minY + 0.18268 * slider.height))
        bezierPath.addCurve(to: CGPoint(x: slider.minX + 0.26924 * slider.width, y: slider.minY + 0.21153 * slider.height), controlPoint1: CGPoint(x: slider.minX + 0.28232 * slider.width, y: slider.minY + 0.18268 * slider.height), controlPoint2: CGPoint(x: slider.minX + 0.26924 * slider.width, y: slider.minY + 0.19575 * slider.height))
        bezierPath.addLine(to: CGPoint(x: slider.minX + 0.26924 * slider.width, y: slider.minY + 0.32692 * slider.height))
        bezierPath.addCurve(to: CGPoint(x: slider.minX + 0.29809 * slider.width, y: slider.minY + 0.35576 * slider.height), controlPoint1: CGPoint(x: slider.minX + 0.26924 * slider.width, y: slider.minY + 0.34269 * slider.height), controlPoint2: CGPoint(x: slider.minX + 0.28232 * slider.width, y: slider.minY + 0.35576 * slider.height))
        bezierPath.addLine(to: CGPoint(x: slider.minX + 0.41347 * slider.width, y: slider.minY + 0.35576 * slider.height))
        bezierPath.addCurve(to: CGPoint(x: slider.minX + 0.44231 * slider.width, y: slider.minY + 0.32692 * slider.height), controlPoint1: CGPoint(x: slider.minX + 0.42924 * slider.width, y: slider.minY + 0.35576 * slider.height), controlPoint2: CGPoint(x: slider.minX + 0.44231 * slider.width, y: slider.minY + 0.34269 * slider.height))
        bezierPath.addLine(to: CGPoint(x: slider.minX + 0.44231 * slider.width, y: slider.minY + 0.21153 * slider.height))
        bezierPath.addCurve(to: CGPoint(x: slider.minX + 0.41347 * slider.width, y: slider.minY + 0.18268 * slider.height), controlPoint1: CGPoint(x: slider.minX + 0.44231 * slider.width, y: slider.minY + 0.19575 * slider.height), controlPoint2: CGPoint(x: slider.minX + 0.42924 * slider.width, y: slider.minY + 0.18268 * slider.height))
        bezierPath.addLine(to: CGPoint(x: slider.minX + 0.41347 * slider.width, y: slider.minY + 0.18268 * slider.height))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: slider.minX + 0.70191 * slider.width, y: slider.minY + 0.41346 * slider.height))
        bezierPath.addLine(to: CGPoint(x: slider.minX + 0.58653 * slider.width, y: slider.minY + 0.41346 * slider.height))
        bezierPath.addCurve(to: CGPoint(x: slider.minX + 0.55769 * slider.width, y: slider.minY + 0.44231 * slider.height), controlPoint1: CGPoint(x: slider.minX + 0.57076 * slider.width, y: slider.minY + 0.41346 * slider.height), controlPoint2: CGPoint(x: slider.minX + 0.55769 * slider.width, y: slider.minY + 0.42653 * slider.height))
        bezierPath.addLine(to: CGPoint(x: slider.minX + 0.55769 * slider.width, y: slider.minY + 0.55769 * slider.height))
        bezierPath.addCurve(to: CGPoint(x: slider.minX + 0.58653 * slider.width, y: slider.minY + 0.58654 * slider.height), controlPoint1: CGPoint(x: slider.minX + 0.55769 * slider.width, y: slider.minY + 0.57347 * slider.height), controlPoint2: CGPoint(x: slider.minX + 0.57076 * slider.width, y: slider.minY + 0.58654 * slider.height))
        bezierPath.addLine(to: CGPoint(x: slider.minX + 0.70191 * slider.width, y: slider.minY + 0.58654 * slider.height))
        bezierPath.addCurve(to: CGPoint(x: slider.minX + 0.73076 * slider.width, y: slider.minY + 0.55769 * slider.height), controlPoint1: CGPoint(x: slider.minX + 0.71769 * slider.width, y: slider.minY + 0.58654 * slider.height), controlPoint2: CGPoint(x: slider.minX + 0.73076 * slider.width, y: slider.minY + 0.57347 * slider.height))
        bezierPath.addLine(to: CGPoint(x: slider.minX + 0.73076 * slider.width, y: slider.minY + 0.44231 * slider.height))
        bezierPath.addCurve(to: CGPoint(x: slider.minX + 0.70191 * slider.width, y: slider.minY + 0.41346 * slider.height), controlPoint1: CGPoint(x: slider.minX + 0.73076 * slider.width, y: slider.minY + 0.42653 * slider.height), controlPoint2: CGPoint(x: slider.minX + 0.71769 * slider.width, y: slider.minY + 0.41346 * slider.height))
        bezierPath.addLine(to: CGPoint(x: slider.minX + 0.70191 * slider.width, y: slider.minY + 0.41346 * slider.height))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: slider.minX + 0.84613 * slider.width, y: slider.minY + 0.47115 * slider.height))
        bezierPath.addLine(to: CGPoint(x: slider.minX + 0.74518 * slider.width, y: slider.minY + 0.47115 * slider.height))
        bezierPath.addLine(to: CGPoint(x: slider.minX + 0.74518 * slider.width, y: slider.minY + 0.52885 * slider.height))
        bezierPath.addLine(to: CGPoint(x: slider.minX + 0.84613 * slider.width, y: slider.minY + 0.52885 * slider.height))
        bezierPath.addLine(to: CGPoint(x: slider.minX + 0.84613 * slider.width, y: slider.minY + 0.47115 * slider.height))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: slider.minX + 0.84613 * slider.width, y: slider.minY + 0.24038 * slider.height))
        bezierPath.addLine(to: CGPoint(x: slider.minX + 0.45673 * slider.width, y: slider.minY + 0.24038 * slider.height))
        bezierPath.addLine(to: CGPoint(x: slider.minX + 0.45673 * slider.width, y: slider.minY + 0.29807 * slider.height))
        bezierPath.addLine(to: CGPoint(x: slider.minX + 0.84613 * slider.width, y: slider.minY + 0.29807 * slider.height))
        bezierPath.addLine(to: CGPoint(x: slider.minX + 0.84613 * slider.width, y: slider.minY + 0.24038 * slider.height))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
    }
    
    public dynamic class func drawMessageBubbles(bubbles: CGRect = CGRect(x: 2.91, y: 2.49, width: 44.57, height: 44.57)) {
        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: bubbles.minX + 0.39741 * bubbles.width, y: bubbles.minY + 0.21148 * bubbles.height))
        bezierPath.addCurve(to: CGPoint(x: bubbles.minX + 0.68586 * bubbles.width, y: bubbles.minY + 0.40379 * bubbles.height), controlPoint1: CGPoint(x: bubbles.minX + 0.55365 * bubbles.width, y: bubbles.minY + 0.21148 * bubbles.height), controlPoint2: CGPoint(x: bubbles.minX + 0.68586 * bubbles.width, y: bubbles.minY + 0.29962 * bubbles.height))
        bezierPath.addCurve(to: CGPoint(x: bubbles.minX + 0.39741 * bubbles.width, y: bubbles.minY + 0.59611 * bubbles.height), controlPoint1: CGPoint(x: bubbles.minX + 0.68586 * bubbles.width, y: bubbles.minY + 0.50796 * bubbles.height), controlPoint2: CGPoint(x: bubbles.minX + 0.55365 * bubbles.width, y: bubbles.minY + 0.59611 * bubbles.height))
        bezierPath.addCurve(to: CGPoint(x: bubbles.minX + 0.32079 * bubbles.width, y: bubbles.minY + 0.58909 * bubbles.height), controlPoint1: CGPoint(x: bubbles.minX + 0.37137 * bubbles.width, y: bubbles.minY + 0.59611 * bubbles.height), controlPoint2: CGPoint(x: bubbles.minX + 0.34583 * bubbles.width, y: bubbles.minY + 0.59360 * bubbles.height))
        bezierPath.addLine(to: CGPoint(x: bubbles.minX + 0.29425 * bubbles.width, y: bubbles.minY + 0.58409 * bubbles.height))
        bezierPath.addLine(to: CGPoint(x: bubbles.minX + 0.27222 * bubbles.width, y: bubbles.minY + 0.59961 * bubbles.height))
        bezierPath.addCurve(to: CGPoint(x: bubbles.minX + 0.24117 * bubbles.width, y: bubbles.minY + 0.61914 * bubbles.height), controlPoint1: CGPoint(x: bubbles.minX + 0.26220 * bubbles.width, y: bubbles.minY + 0.60662 * bubbles.height), controlPoint2: CGPoint(x: bubbles.minX + 0.25169 * bubbles.width, y: bubbles.minY + 0.61313 * bubbles.height))
        bezierPath.addLine(to: CGPoint(x: bubbles.minX + 0.25870 * bubbles.width, y: bubbles.minY + 0.57708 * bubbles.height))
        bezierPath.addLine(to: CGPoint(x: bubbles.minX + 0.21012 * bubbles.width, y: bubbles.minY + 0.54903 * bubbles.height))
        bezierPath.addCurve(to: CGPoint(x: bubbles.minX + 0.10897 * bubbles.width, y: bubbles.minY + 0.40379 * bubbles.height), controlPoint1: CGPoint(x: bubbles.minX + 0.14602 * bubbles.width, y: bubbles.minY + 0.51197 * bubbles.height), controlPoint2: CGPoint(x: bubbles.minX + 0.10897 * bubbles.width, y: bubbles.minY + 0.45888 * bubbles.height))
        bezierPath.addCurve(to: CGPoint(x: bubbles.minX + 0.39741 * bubbles.width, y: bubbles.minY + 0.21148 * bubbles.height), controlPoint1: CGPoint(x: bubbles.minX + 0.10897 * bubbles.width, y: bubbles.minY + 0.29962 * bubbles.height), controlPoint2: CGPoint(x: bubbles.minX + 0.24117 * bubbles.width, y: bubbles.minY + 0.21148 * bubbles.height))
        bezierPath.addLine(to: CGPoint(x: bubbles.minX + 0.39741 * bubbles.width, y: bubbles.minY + 0.21148 * bubbles.height))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: bubbles.minX + 0.39741 * bubbles.width, y: bubbles.minY + 0.14737 * bubbles.height))
        bezierPath.addCurve(to: CGPoint(x: bubbles.minX + 0.04487 * bubbles.width, y: bubbles.minY + 0.40379 * bubbles.height), controlPoint1: CGPoint(x: bubbles.minX + 0.20261 * bubbles.width, y: bubbles.minY + 0.14737 * bubbles.height), controlPoint2: CGPoint(x: bubbles.minX + 0.04487 * bubbles.width, y: bubbles.minY + 0.26206 * bubbles.height))
        bezierPath.addCurve(to: CGPoint(x: bubbles.minX + 0.17807 * bubbles.width, y: bubbles.minY + 0.60462 * bubbles.height), controlPoint1: CGPoint(x: bubbles.minX + 0.04487 * bubbles.width, y: bubbles.minY + 0.48492 * bubbles.height), controlPoint2: CGPoint(x: bubbles.minX + 0.09695 * bubbles.width, y: bubbles.minY + 0.55754 * bubbles.height))
        bezierPath.addCurve(to: CGPoint(x: bubbles.minX + 0.11948 * bubbles.width, y: bubbles.minY + 0.68776 * bubbles.height), controlPoint1: CGPoint(x: bubbles.minX + 0.16105 * bubbles.width, y: bubbles.minY + 0.64619 * bubbles.height), controlPoint2: CGPoint(x: bubbles.minX + 0.13901 * bubbles.width, y: bubbles.minY + 0.66572 * bubbles.height))
        bezierPath.addCurve(to: CGPoint(x: bubbles.minX + 0.10947 * bubbles.width, y: bubbles.minY + 0.70979 * bubbles.height), controlPoint1: CGPoint(x: bubbles.minX + 0.11398 * bubbles.width, y: bubbles.minY + 0.69427 * bubbles.height), controlPoint2: CGPoint(x: bubbles.minX + 0.10747 * bubbles.width, y: bubbles.minY + 0.70028 * bubbles.height))
        bezierPath.addCurve(to: CGPoint(x: bubbles.minX + 0.12549 * bubbles.width, y: bubbles.minY + 0.72432 * bubbles.height), controlPoint1: CGPoint(x: bubbles.minX + 0.11097 * bubbles.width, y: bubbles.minY + 0.71831 * bubbles.height), controlPoint2: CGPoint(x: bubbles.minX + 0.11798 * bubbles.width, y: bubbles.minY + 0.72432 * bubbles.height))
        bezierPath.addLine(to: CGPoint(x: bubbles.minX + 0.12700 * bubbles.width, y: bubbles.minY + 0.72432 * bubbles.height))
        bezierPath.addCurve(to: CGPoint(x: bubbles.minX + 0.17006 * bubbles.width, y: bubbles.minY + 0.71630 * bubbles.height), controlPoint1: CGPoint(x: bubbles.minX + 0.14202 * bubbles.width, y: bubbles.minY + 0.72231 * bubbles.height), controlPoint2: CGPoint(x: bubbles.minX + 0.15654 * bubbles.width, y: bubbles.minY + 0.71981 * bubbles.height))
        bezierPath.addCurve(to: CGPoint(x: bubbles.minX + 0.30928 * bubbles.width, y: bubbles.minY + 0.65220 * bubbles.height), controlPoint1: CGPoint(x: bubbles.minX + 0.22064 * bubbles.width, y: bubbles.minY + 0.70328 * bubbles.height), controlPoint2: CGPoint(x: bubbles.minX + 0.26771 * bubbles.width, y: bubbles.minY + 0.68175 * bubbles.height))
        bezierPath.addCurve(to: CGPoint(x: bubbles.minX + 0.39741 * bubbles.width, y: bubbles.minY + 0.66021 * bubbles.height), controlPoint1: CGPoint(x: bubbles.minX + 0.33732 * bubbles.width, y: bubbles.minY + 0.65721 * bubbles.height), controlPoint2: CGPoint(x: bubbles.minX + 0.36686 * bubbles.width, y: bubbles.minY + 0.66021 * bubbles.height))
        bezierPath.addCurve(to: CGPoint(x: bubbles.minX + 0.74995 * bubbles.width, y: bubbles.minY + 0.40379 * bubbles.height), controlPoint1: CGPoint(x: bubbles.minX + 0.59221 * bubbles.width, y: bubbles.minY + 0.66021 * bubbles.height), controlPoint2: CGPoint(x: bubbles.minX + 0.74995 * bubbles.width, y: bubbles.minY + 0.54552 * bubbles.height))
        bezierPath.addCurve(to: CGPoint(x: bubbles.minX + 0.39741 * bubbles.width, y: bubbles.minY + 0.14737 * bubbles.height), controlPoint1: CGPoint(x: bubbles.minX + 0.74995 * bubbles.width, y: bubbles.minY + 0.26206 * bubbles.height), controlPoint2: CGPoint(x: bubbles.minX + 0.59221 * bubbles.width, y: bubbles.minY + 0.14737 * bubbles.height))
        bezierPath.addLine(to: CGPoint(x: bubbles.minX + 0.39741 * bubbles.width, y: bubbles.minY + 0.14737 * bubbles.height))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: bubbles.minX + 0.80904 * bubbles.width, y: bubbles.minY + 0.73283 * bubbles.height))
        bezierPath.addCurve(to: CGPoint(x: bubbles.minX + 0.94225 * bubbles.width, y: bubbles.minY + 0.53200 * bubbles.height), controlPoint1: CGPoint(x: bubbles.minX + 0.89017 * bubbles.width, y: bubbles.minY + 0.68575 * bubbles.height), controlPoint2: CGPoint(x: bubbles.minX + 0.94225 * bubbles.width, y: bubbles.minY + 0.61363 * bubbles.height))
        bezierPath.addCurve(to: CGPoint(x: bubbles.minX + 0.80253 * bubbles.width, y: bubbles.minY + 0.32767 * bubbles.height), controlPoint1: CGPoint(x: bubbles.minX + 0.94225 * bubbles.width, y: bubbles.minY + 0.44836 * bubbles.height), controlPoint2: CGPoint(x: bubbles.minX + 0.88717 * bubbles.width, y: bubbles.minY + 0.37424 * bubbles.height))
        bezierPath.addCurve(to: CGPoint(x: bubbles.minX + 0.81405 * bubbles.width, y: bubbles.minY + 0.40379 * bubbles.height), controlPoint1: CGPoint(x: bubbles.minX + 0.81005 * bubbles.width, y: bubbles.minY + 0.35221 * bubbles.height), controlPoint2: CGPoint(x: bubbles.minX + 0.81405 * bubbles.width, y: bubbles.minY + 0.37775 * bubbles.height))
        bezierPath.addCurve(to: CGPoint(x: bubbles.minX + 0.68435 * bubbles.width, y: bubbles.minY + 0.63717 * bubbles.height), controlPoint1: CGPoint(x: bubbles.minX + 0.81405 * bubbles.width, y: bubbles.minY + 0.49344 * bubbles.height), controlPoint2: CGPoint(x: bubbles.minX + 0.76798 * bubbles.width, y: bubbles.minY + 0.57607 * bubbles.height))
        bezierPath.addCurve(to: CGPoint(x: bubbles.minX + 0.39741 * bubbles.width, y: bubbles.minY + 0.72432 * bubbles.height), controlPoint1: CGPoint(x: bubbles.minX + 0.60673 * bubbles.width, y: bubbles.minY + 0.69326 * bubbles.height), controlPoint2: CGPoint(x: bubbles.minX + 0.50508 * bubbles.width, y: bubbles.minY + 0.72432 * bubbles.height))
        bezierPath.addCurve(to: CGPoint(x: bubbles.minX + 0.35334 * bubbles.width, y: bubbles.minY + 0.72231 * bubbles.height), controlPoint1: CGPoint(x: bubbles.minX + 0.38289 * bubbles.width, y: bubbles.minY + 0.72432 * bubbles.height), controlPoint2: CGPoint(x: bubbles.minX + 0.36787 * bubbles.width, y: bubbles.minY + 0.72331 * bubbles.height))
        bezierPath.addCurve(to: CGPoint(x: bubbles.minX + 0.58971 * bubbles.width, y: bubbles.minY + 0.78842 * bubbles.height), controlPoint1: CGPoint(x: bubbles.minX + 0.41594 * bubbles.width, y: bubbles.minY + 0.76338 * bubbles.height), controlPoint2: CGPoint(x: bubbles.minX + 0.49907 * bubbles.width, y: bubbles.minY + 0.78842 * bubbles.height))
        bezierPath.addCurve(to: CGPoint(x: bubbles.minX + 0.67784 * bubbles.width, y: bubbles.minY + 0.78041 * bubbles.height), controlPoint1: CGPoint(x: bubbles.minX + 0.62025 * bubbles.width, y: bubbles.minY + 0.78842 * bubbles.height), controlPoint2: CGPoint(x: bubbles.minX + 0.64980 * bubbles.width, y: bubbles.minY + 0.78542 * bubbles.height))
        bezierPath.addCurve(to: CGPoint(x: bubbles.minX + 0.81706 * bubbles.width, y: bubbles.minY + 0.84451 * bubbles.height), controlPoint1: CGPoint(x: bubbles.minX + 0.71941 * bubbles.width, y: bubbles.minY + 0.80996 * bubbles.height), controlPoint2: CGPoint(x: bubbles.minX + 0.76648 * bubbles.width, y: bubbles.minY + 0.83149 * bubbles.height))
        bezierPath.addCurve(to: CGPoint(x: bubbles.minX + 0.86012 * bubbles.width, y: bubbles.minY + 0.85252 * bubbles.height), controlPoint1: CGPoint(x: bubbles.minX + 0.83058 * bubbles.width, y: bubbles.minY + 0.84802 * bubbles.height), controlPoint2: CGPoint(x: bubbles.minX + 0.84510 * bubbles.width, y: bubbles.minY + 0.85052 * bubbles.height))
        bezierPath.addCurve(to: CGPoint(x: bubbles.minX + 0.87765 * bubbles.width, y: bubbles.minY + 0.83800 * bubbles.height), controlPoint1: CGPoint(x: bubbles.minX + 0.86814 * bubbles.width, y: bubbles.minY + 0.85353 * bubbles.height), controlPoint2: CGPoint(x: bubbles.minX + 0.87565 * bubbles.width, y: bubbles.minY + 0.84702 * bubbles.height))
        bezierPath.addCurve(to: CGPoint(x: bubbles.minX + 0.86763 * bubbles.width, y: bubbles.minY + 0.81597 * bubbles.height), controlPoint1: CGPoint(x: bubbles.minX + 0.87965 * bubbles.width, y: bubbles.minY + 0.82849 * bubbles.height), controlPoint2: CGPoint(x: bubbles.minX + 0.87314 * bubbles.width, y: bubbles.minY + 0.82248 * bubbles.height))
        bezierPath.addCurve(to: CGPoint(x: bubbles.minX + 0.80904 * bubbles.width, y: bubbles.minY + 0.73283 * bubbles.height), controlPoint1: CGPoint(x: bubbles.minX + 0.84810 * bubbles.width, y: bubbles.minY + 0.79393 * bubbles.height), controlPoint2: CGPoint(x: bubbles.minX + 0.82607 * bubbles.width, y: bubbles.minY + 0.77440 * bubbles.height))
        bezierPath.addLine(to: CGPoint(x: bubbles.minX + 0.80904 * bubbles.width, y: bubbles.minY + 0.73283 * bubbles.height))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
    }
    
    public dynamic class func drawFirstAidKit(cart: CGRect = CGRect(x: 2.91, y: 2.49, width: 44.57, height: 44.57)) {
        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: cart.minX + 0.69230 * cart.width, y: cart.minY + 0.61218 * cart.height))
        bezierPath.addCurve(to: CGPoint(x: cart.minX + 0.67627 * cart.width, y: cart.minY + 0.62821 * cart.height), controlPoint1: CGPoint(x: cart.minX + 0.69230 * cart.width, y: cart.minY + 0.62120 * cart.height), controlPoint2: CGPoint(x: cart.minX + 0.68529 * cart.width, y: cart.minY + 0.62821 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.56410 * cart.width, y: cart.minY + 0.62821 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.56410 * cart.width, y: cart.minY + 0.74039 * cart.height))
        bezierPath.addCurve(to: CGPoint(x: cart.minX + 0.54807 * cart.width, y: cart.minY + 0.75642 * cart.height), controlPoint1: CGPoint(x: cart.minX + 0.56410 * cart.width, y: cart.minY + 0.74941 * cart.height), controlPoint2: CGPoint(x: cart.minX + 0.55709 * cart.width, y: cart.minY + 0.75642 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.45193 * cart.width, y: cart.minY + 0.75642 * cart.height))
        bezierPath.addCurve(to: CGPoint(x: cart.minX + 0.43590 * cart.width, y: cart.minY + 0.74039 * cart.height), controlPoint1: CGPoint(x: cart.minX + 0.44291 * cart.width, y: cart.minY + 0.75642 * cart.height), controlPoint2: CGPoint(x: cart.minX + 0.43590 * cart.width, y: cart.minY + 0.74941 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.43590 * cart.width, y: cart.minY + 0.62821 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.32373 * cart.width, y: cart.minY + 0.62821 * cart.height))
        bezierPath.addCurve(to: CGPoint(x: cart.minX + 0.30770 * cart.width, y: cart.minY + 0.61218 * cart.height), controlPoint1: CGPoint(x: cart.minX + 0.31471 * cart.width, y: cart.minY + 0.62821 * cart.height), controlPoint2: CGPoint(x: cart.minX + 0.30770 * cart.width, y: cart.minY + 0.62120 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.30770 * cart.width, y: cart.minY + 0.51603 * cart.height))
        bezierPath.addCurve(to: CGPoint(x: cart.minX + 0.32373 * cart.width, y: cart.minY + 0.50000 * cart.height), controlPoint1: CGPoint(x: cart.minX + 0.30770 * cart.width, y: cart.minY + 0.50701 * cart.height), controlPoint2: CGPoint(x: cart.minX + 0.31471 * cart.width, y: cart.minY + 0.50000 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.43590 * cart.width, y: cart.minY + 0.50000 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.43590 * cart.width, y: cart.minY + 0.38782 * cart.height))
        bezierPath.addCurve(to: CGPoint(x: cart.minX + 0.45193 * cart.width, y: cart.minY + 0.37179 * cart.height), controlPoint1: CGPoint(x: cart.minX + 0.43590 * cart.width, y: cart.minY + 0.37880 * cart.height), controlPoint2: CGPoint(x: cart.minX + 0.44291 * cart.width, y: cart.minY + 0.37179 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.54807 * cart.width, y: cart.minY + 0.37179 * cart.height))
        bezierPath.addCurve(to: CGPoint(x: cart.minX + 0.56410 * cart.width, y: cart.minY + 0.38782 * cart.height), controlPoint1: CGPoint(x: cart.minX + 0.55709 * cart.width, y: cart.minY + 0.37179 * cart.height), controlPoint2: CGPoint(x: cart.minX + 0.56410 * cart.width, y: cart.minY + 0.37880 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.56410 * cart.width, y: cart.minY + 0.50000 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.67627 * cart.width, y: cart.minY + 0.50000 * cart.height))
        bezierPath.addCurve(to: CGPoint(x: cart.minX + 0.69230 * cart.width, y: cart.minY + 0.51603 * cart.height), controlPoint1: CGPoint(x: cart.minX + 0.68529 * cart.width, y: cart.minY + 0.50000 * cart.height), controlPoint2: CGPoint(x: cart.minX + 0.69230 * cart.width, y: cart.minY + 0.50701 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.69230 * cart.width, y: cart.minY + 0.61218 * cart.height))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: cart.minX + 0.37180 * cart.width, y: cart.minY + 0.24358 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.37180 * cart.width, y: cart.minY + 0.17948 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.62820 * cart.width, y: cart.minY + 0.17948 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.62820 * cart.width, y: cart.minY + 0.24358 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.37180 * cart.width, y: cart.minY + 0.24358 * cart.height))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: cart.minX + 0.17951 * cart.width, y: cart.minY + 0.24358 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.16348 * cart.width, y: cart.minY + 0.24358 * cart.height))
        bezierPath.addCurve(to: CGPoint(x: cart.minX + 0.05131 * cart.width, y: cart.minY + 0.35576 * cart.height), controlPoint1: CGPoint(x: cart.minX + 0.10189 * cart.width, y: cart.minY + 0.24358 * cart.height), controlPoint2: CGPoint(x: cart.minX + 0.05131 * cart.width, y: cart.minY + 0.29416 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.05131 * cart.width, y: cart.minY + 0.77244 * cart.height))
        bezierPath.addCurve(to: CGPoint(x: cart.minX + 0.16348 * cart.width, y: cart.minY + 0.88463 * cart.height), controlPoint1: CGPoint(x: cart.minX + 0.05131 * cart.width, y: cart.minY + 0.83405 * cart.height), controlPoint2: CGPoint(x: cart.minX + 0.10189 * cart.width, y: cart.minY + 0.88463 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.17951 * cart.width, y: cart.minY + 0.88463 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.17951 * cart.width, y: cart.minY + 0.24358 * cart.height))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: cart.minX + 0.77242 * cart.width, y: cart.minY + 0.24358 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.69230 * cart.width, y: cart.minY + 0.24358 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.69230 * cart.width, y: cart.minY + 0.16345 * cart.height))
        bezierPath.addCurve(to: CGPoint(x: cart.minX + 0.64422 * cart.width, y: cart.minY + 0.11537 * cart.height), controlPoint1: CGPoint(x: cart.minX + 0.69230 * cart.width, y: cart.minY + 0.13691 * cart.height), controlPoint2: CGPoint(x: cart.minX + 0.67076 * cart.width, y: cart.minY + 0.11537 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.35578 * cart.width, y: cart.minY + 0.11537 * cart.height))
        bezierPath.addCurve(to: CGPoint(x: cart.minX + 0.30770 * cart.width, y: cart.minY + 0.16345 * cart.height), controlPoint1: CGPoint(x: cart.minX + 0.32924 * cart.width, y: cart.minY + 0.11537 * cart.height), controlPoint2: CGPoint(x: cart.minX + 0.30770 * cart.width, y: cart.minY + 0.13691 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.30770 * cart.width, y: cart.minY + 0.24358 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.22758 * cart.width, y: cart.minY + 0.24358 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.22758 * cart.width, y: cart.minY + 0.88463 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.77242 * cart.width, y: cart.minY + 0.88463 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.77242 * cart.width, y: cart.minY + 0.24358 * cart.height))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: cart.minX + 0.94869 * cart.width, y: cart.minY + 0.35576 * cart.height))
        bezierPath.addCurve(to: CGPoint(x: cart.minX + 0.83652 * cart.width, y: cart.minY + 0.24358 * cart.height), controlPoint1: CGPoint(x: cart.minX + 0.94869 * cart.width, y: cart.minY + 0.29416 * cart.height), controlPoint2: CGPoint(x: cart.minX + 0.89811 * cart.width, y: cart.minY + 0.24358 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.82049 * cart.width, y: cart.minY + 0.24358 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.82049 * cart.width, y: cart.minY + 0.88463 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.83652 * cart.width, y: cart.minY + 0.88463 * cart.height))
        bezierPath.addCurve(to: CGPoint(x: cart.minX + 0.94869 * cart.width, y: cart.minY + 0.77244 * cart.height), controlPoint1: CGPoint(x: cart.minX + 0.89811 * cart.width, y: cart.minY + 0.88463 * cart.height), controlPoint2: CGPoint(x: cart.minX + 0.94869 * cart.width, y: cart.minY + 0.83405 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.94869 * cart.width, y: cart.minY + 0.35576 * cart.height))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
    }
    
    public dynamic class func drawShoppingCart(cart: CGRect = CGRect(x: 2.91, y: 2.49, width: 44.57, height: 44.57)) {
        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: cart.minX + 0.33796 * cart.width, y: cart.minY + 0.72989 * cart.height))
        bezierPath.addCurve(to: CGPoint(x: cart.minX + 0.39260 * cart.width, y: cart.minY + 0.75250 * cart.height), controlPoint1: CGPoint(x: cart.minX + 0.35932 * cart.width, y: cart.minY + 0.72989 * cart.height), controlPoint2: CGPoint(x: cart.minX + 0.37753 * cart.width, y: cart.minY + 0.73742 * cart.height))
        bezierPath.addCurve(to: CGPoint(x: cart.minX + 0.41521 * cart.width, y: cart.minY + 0.80715 * cart.height), controlPoint1: CGPoint(x: cart.minX + 0.40768 * cart.width, y: cart.minY + 0.76757 * cart.height), controlPoint2: CGPoint(x: cart.minX + 0.41521 * cart.width, y: cart.minY + 0.78579 * cart.height))
        bezierPath.addCurve(to: CGPoint(x: cart.minX + 0.39260 * cart.width, y: cart.minY + 0.86273 * cart.height), controlPoint1: CGPoint(x: cart.minX + 0.41521 * cart.width, y: cart.minY + 0.82850 * cart.height), controlPoint2: CGPoint(x: cart.minX + 0.40768 * cart.width, y: cart.minY + 0.84703 * cart.height))
        bezierPath.addCurve(to: CGPoint(x: cart.minX + 0.33796 * cart.width, y: cart.minY + 0.88629 * cart.height), controlPoint1: CGPoint(x: cart.minX + 0.37753 * cart.width, y: cart.minY + 0.87844 * cart.height), controlPoint2: CGPoint(x: cart.minX + 0.35932 * cart.width, y: cart.minY + 0.88629 * cart.height))
        bezierPath.addCurve(to: CGPoint(x: cart.minX + 0.28238 * cart.width, y: cart.minY + 0.86273 * cart.height), controlPoint1: CGPoint(x: cart.minX + 0.31661 * cart.width, y: cart.minY + 0.88629 * cart.height), controlPoint2: CGPoint(x: cart.minX + 0.29808 * cart.width, y: cart.minY + 0.87844 * cart.height))
        bezierPath.addCurve(to: CGPoint(x: cart.minX + 0.25883 * cart.width, y: cart.minY + 0.80715 * cart.height), controlPoint1: CGPoint(x: cart.minX + 0.26668 * cart.width, y: cart.minY + 0.84703 * cart.height), controlPoint2: CGPoint(x: cart.minX + 0.25883 * cart.width, y: cart.minY + 0.82850 * cart.height))
        bezierPath.addCurve(to: CGPoint(x: cart.minX + 0.28238 * cart.width, y: cart.minY + 0.75250 * cart.height), controlPoint1: CGPoint(x: cart.minX + 0.25883 * cart.width, y: cart.minY + 0.78579 * cart.height), controlPoint2: CGPoint(x: cart.minX + 0.26668 * cart.width, y: cart.minY + 0.76757 * cart.height))
        bezierPath.addCurve(to: CGPoint(x: cart.minX + 0.33796 * cart.width, y: cart.minY + 0.72989 * cart.height), controlPoint1: CGPoint(x: cart.minX + 0.29808 * cart.width, y: cart.minY + 0.73742 * cart.height), controlPoint2: CGPoint(x: cart.minX + 0.31661 * cart.width, y: cart.minY + 0.72989 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.33796 * cart.width, y: cart.minY + 0.72989 * cart.height))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: cart.minX + 0.10810 * cart.width, y: cart.minY + 0.11371 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.23622 * cart.width, y: cart.minY + 0.11371 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.27202 * cart.width, y: cart.minY + 0.19285 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.85234 * cart.width, y: cart.minY + 0.19285 * cart.height))
        bezierPath.addCurve(to: CGPoint(x: cart.minX + 0.87966 * cart.width, y: cart.minY + 0.20416 * cart.height), controlPoint1: CGPoint(x: cart.minX + 0.86238 * cart.width, y: cart.minY + 0.19285 * cart.height), controlPoint2: CGPoint(x: cart.minX + 0.87149 * cart.width, y: cart.minY + 0.19662 * cart.height))
        bezierPath.addCurve(to: CGPoint(x: cart.minX + 0.89190 * cart.width, y: cart.minY + 0.23054 * cart.height), controlPoint1: CGPoint(x: cart.minX + 0.88782 * cart.width, y: cart.minY + 0.21170 * cart.height), controlPoint2: CGPoint(x: cart.minX + 0.89190 * cart.width, y: cart.minY + 0.22049 * cart.height))
        bezierPath.addCurve(to: CGPoint(x: cart.minX + 0.88813 * cart.width, y: cart.minY + 0.24938 * cart.height), controlPoint1: CGPoint(x: cart.minX + 0.89190 * cart.width, y: cart.minY + 0.23808 * cart.height), controlPoint2: CGPoint(x: cart.minX + 0.89065 * cart.width, y: cart.minY + 0.24436 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.74682 * cart.width, y: cart.minY + 0.49246 * cart.height))
        bezierPath.addCurve(to: CGPoint(x: cart.minX + 0.67899 * cart.width, y: cart.minY + 0.53392 * cart.height), controlPoint1: CGPoint(x: cart.minX + 0.73301 * cart.width, y: cart.minY + 0.52010 * cart.height), controlPoint2: CGPoint(x: cart.minX + 0.71040 * cart.width, y: cart.minY + 0.53392 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.38695 * cart.width, y: cart.minY + 0.53392 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.34738 * cart.width, y: cart.minY + 0.59422 * cart.height))
        bezierPath.addCurve(to: CGPoint(x: cart.minX + 0.34362 * cart.width, y: cart.minY + 0.60552 * cart.height), controlPoint1: CGPoint(x: cart.minX + 0.34487 * cart.width, y: cart.minY + 0.60050 * cart.height), controlPoint2: CGPoint(x: cart.minX + 0.34362 * cart.width, y: cart.minY + 0.60427 * cart.height))
        bezierPath.addCurve(to: CGPoint(x: cart.minX + 0.35304 * cart.width, y: cart.minY + 0.61494 * cart.height), controlPoint1: CGPoint(x: cart.minX + 0.34362 * cart.width, y: cart.minY + 0.61180 * cart.height), controlPoint2: CGPoint(x: cart.minX + 0.34676 * cart.width, y: cart.minY + 0.61494 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.80146 * cart.width, y: cart.minY + 0.61494 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.80146 * cart.width, y: cart.minY + 0.69032 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.34362 * cart.width, y: cart.minY + 0.69032 * cart.height))
        bezierPath.addCurve(to: CGPoint(x: cart.minX + 0.28238 * cart.width, y: cart.minY + 0.66959 * cart.height), controlPoint1: CGPoint(x: cart.minX + 0.31849 * cart.width, y: cart.minY + 0.69032 * cart.height), controlPoint2: CGPoint(x: cart.minX + 0.29808 * cart.width, y: cart.minY + 0.68341 * cart.height))
        bezierPath.addCurve(to: CGPoint(x: cart.minX + 0.25883 * cart.width, y: cart.minY + 0.61118 * cart.height), controlPoint1: CGPoint(x: cart.minX + 0.26668 * cart.width, y: cart.minY + 0.65577 * cart.height), controlPoint2: CGPoint(x: cart.minX + 0.25883 * cart.width, y: cart.minY + 0.63630 * cart.height))
        bezierPath.addCurve(to: CGPoint(x: cart.minX + 0.26825 * cart.width, y: cart.minY + 0.57349 * cart.height), controlPoint1: CGPoint(x: cart.minX + 0.25883 * cart.width, y: cart.minY + 0.59610 * cart.height), controlPoint2: CGPoint(x: cart.minX + 0.26197 * cart.width, y: cart.minY + 0.58354 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.32666 * cart.width, y: cart.minY + 0.47739 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.18723 * cart.width, y: cart.minY + 0.19285 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.10810 * cart.width, y: cart.minY + 0.19285 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.10810 * cart.width, y: cart.minY + 0.11371 * cart.height))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: cart.minX + 0.72233 * cart.width, y: cart.minY + 0.72989 * cart.height))
        bezierPath.addCurve(to: CGPoint(x: cart.minX + 0.77791 * cart.width, y: cart.minY + 0.75250 * cart.height), controlPoint1: CGPoint(x: cart.minX + 0.74368 * cart.width, y: cart.minY + 0.72989 * cart.height), controlPoint2: CGPoint(x: cart.minX + 0.76221 * cart.width, y: cart.minY + 0.73742 * cart.height))
        bezierPath.addCurve(to: CGPoint(x: cart.minX + 0.80146 * cart.width, y: cart.minY + 0.80715 * cart.height), controlPoint1: CGPoint(x: cart.minX + 0.79361 * cart.width, y: cart.minY + 0.76757 * cart.height), controlPoint2: CGPoint(x: cart.minX + 0.80146 * cart.width, y: cart.minY + 0.78579 * cart.height))
        bezierPath.addCurve(to: CGPoint(x: cart.minX + 0.77791 * cart.width, y: cart.minY + 0.86273 * cart.height), controlPoint1: CGPoint(x: cart.minX + 0.80146 * cart.width, y: cart.minY + 0.82850 * cart.height), controlPoint2: CGPoint(x: cart.minX + 0.79361 * cart.width, y: cart.minY + 0.84703 * cart.height))
        bezierPath.addCurve(to: CGPoint(x: cart.minX + 0.72233 * cart.width, y: cart.minY + 0.88629 * cart.height), controlPoint1: CGPoint(x: cart.minX + 0.76221 * cart.width, y: cart.minY + 0.87844 * cart.height), controlPoint2: CGPoint(x: cart.minX + 0.74368 * cart.width, y: cart.minY + 0.88629 * cart.height))
        bezierPath.addCurve(to: CGPoint(x: cart.minX + 0.66769 * cart.width, y: cart.minY + 0.86273 * cart.height), controlPoint1: CGPoint(x: cart.minX + 0.70098 * cart.width, y: cart.minY + 0.88629 * cart.height), controlPoint2: CGPoint(x: cart.minX + 0.68276 * cart.width, y: cart.minY + 0.87844 * cart.height))
        bezierPath.addCurve(to: CGPoint(x: cart.minX + 0.64508 * cart.width, y: cart.minY + 0.80715 * cart.height), controlPoint1: CGPoint(x: cart.minX + 0.65262 * cart.width, y: cart.minY + 0.84703 * cart.height), controlPoint2: CGPoint(x: cart.minX + 0.64508 * cart.width, y: cart.minY + 0.82850 * cart.height))
        bezierPath.addCurve(to: CGPoint(x: cart.minX + 0.66769 * cart.width, y: cart.minY + 0.75250 * cart.height), controlPoint1: CGPoint(x: cart.minX + 0.64508 * cart.width, y: cart.minY + 0.78579 * cart.height), controlPoint2: CGPoint(x: cart.minX + 0.65262 * cart.width, y: cart.minY + 0.76757 * cart.height))
        bezierPath.addCurve(to: CGPoint(x: cart.minX + 0.72233 * cart.width, y: cart.minY + 0.72989 * cart.height), controlPoint1: CGPoint(x: cart.minX + 0.68276 * cart.width, y: cart.minY + 0.73742 * cart.height), controlPoint2: CGPoint(x: cart.minX + 0.70098 * cart.width, y: cart.minY + 0.72989 * cart.height))
        bezierPath.addLine(to: CGPoint(x: cart.minX + 0.72233 * cart.width, y: cart.minY + 0.72989 * cart.height))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
    }
    
    public dynamic class func drawCustomShapedRoundedBox(frame: CGRect = CGRect(x: 2, y: 2.4, width: 136, height: 74)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }
        
        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        
        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black.withAlphaComponent(0.1)
        shadow.shadowOffset = CGSize(width: 0, height: 0)
        shadow.shadowBlurRadius = 8
        
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: frame.minX + fastFloor(frame.width * 0.04412 - 0.5) + 1, y: frame.minY + fastFloor(frame.height * 0.08108 + 0.5), width: fastFloor(frame.width * 0.95588 + 0.5) - fastFloor(frame.width * 0.04412 - 0.5) - 1, height: fastFloor(frame.height * 0.91892 + 0.5) - fastFloor(frame.height * 0.08108 + 0.5)), byRoundingCorners: [.topLeft, .bottomRight], cornerRadii: CGSize(width: 20, height: 20))
        rectanglePath.close()
        context.saveGState()
        context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: (shadow.shadowColor as! UIColor).cgColor)
        fillColor.setFill()
        rectanglePath.fill()
        context.restoreGState()
    }
 
    public dynamic class func drawHatchTexture(frame: CGRect = CGRect(x: 12, y: 13, width: 176, height: 126)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }
        
        //// Color Declarations
        let fillColor3 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.100)
        let fillColor4 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.200)
        let fillColor5 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.400)
        let fillColor6 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.300)
        let fillColor7 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.600)
        
        
        //// Subframes
        let group3: CGRect = CGRect(x: frame.minX + fastFloor((frame.width - 149.11) * 0.49349 + 0.23) + 0.27, y: frame.minY + fastFloor((frame.height - 111.81) * 0.47004 - 0.17) + 0.67, width: 149.11, height: 111.81)
        
        
        //// Group 3
        context.saveGState()
        context.setBlendMode(.overlay)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        
        //// Group 4
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip
        let clipPath = UIBezierPath(rect: CGRect(x: -13.18, y: -13.18, width: 26.35, height: 26.35))
        var clipTransformation = CGAffineTransform.identity
        clipTransformation = clipTransformation.translatedBy(x: group3.minX + 74.58, y: group3.minY + 93.18)
        clipTransformation = clipTransformation.rotated(by: -45 * CGFloat.pi/180)
        clipPath.apply(clipTransformation)
        clipPath.addClip()
        
        
        //// Rectangle Drawing
        context.saveGState()
        context.translateBy(x: group3.minX + 74.58, y: group3.minY + 93.18)
        context.rotate(by: -45 * CGFloat.pi/180)
        
        let rectanglePath = UIBezierPath(rect: CGRect(x: -18.18, y: -18.18, width: 36.35, height: 36.35))
        fillColor3.setFill()
        rectanglePath.fill()
        
        context.restoreGState()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Group 5
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip 2
        let clip2Path = UIBezierPath(rect: CGRect(x: -13.18, y: -13.18, width: 26.35, height: 26.35))
        var clip2Transformation = CGAffineTransform.identity
        clip2Transformation = clip2Transformation.translatedBy(x: group3.minX + 130.48, y: group3.minY + 74.53)
        clip2Transformation = clip2Transformation.rotated(by: -45 * CGFloat.pi/180)
        clip2Path.apply(clip2Transformation)
        clip2Path.addClip()
        
        
        //// Rectangle 3 Drawing
        context.saveGState()
        context.translateBy(x: group3.minX + 130.48, y: group3.minY + 74.53)
        context.rotate(by: 45 * CGFloat.pi/180)
        
        let rectangle3Path = UIBezierPath(rect: CGRect(x: -18.18, y: -18.18, width: 36.35, height: 36.35))
        fillColor4.setFill()
        rectangle3Path.fill()
        
        context.restoreGState()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Group 6
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip 3
        let clip3Path = UIBezierPath(rect: CGRect(x: -13.18, y: -13.18, width: 26.35, height: 26.35))
        var clip3Transformation = CGAffineTransform.identity
        clip3Transformation = clip3Transformation.translatedBy(x: group3.minX + 111.88, y: group3.minY + 55.93)
        clip3Transformation = clip3Transformation.rotated(by: 45 * CGFloat.pi/180)
        clip3Path.apply(clip3Transformation)
        clip3Path.addClip()
        
        
        //// Rectangle 5 Drawing
        context.saveGState()
        context.translateBy(x: group3.minX + 111.88, y: group3.minY + 55.93)
        context.rotate(by: 45 * CGFloat.pi/180)
        
        let rectangle5Path = UIBezierPath(rect: CGRect(x: -18.18, y: -18.18, width: 36.35, height: 36.35))
        fillColor5.setFill()
        rectangle5Path.fill()
        
        context.restoreGState()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Group 7
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip 4
        let clip4Path = UIBezierPath(rect: CGRect(x: -13.18, y: -13.18, width: 26.35, height: 26.35))
        var clip4Transformation = CGAffineTransform.identity
        clip4Transformation = clip4Transformation.translatedBy(x: group3.minX + 93.23, y: group3.minY + 74.53)
        clip4Transformation = clip4Transformation.rotated(by: -45 * CGFloat.pi/180)
        clip4Path.apply(clip4Transformation)
        clip4Path.addClip()
        
        
        //// Rectangle 7 Drawing
        context.saveGState()
        context.translateBy(x: group3.minX + 93.23, y: group3.minY + 74.53)
        context.rotate(by: -45 * CGFloat.pi/180)
        
        let rectangle7Path = UIBezierPath(rect: CGRect(x: -18.18, y: -18.18, width: 36.35, height: 36.35))
        fillColor6.setFill()
        rectangle7Path.fill()
        
        context.restoreGState()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Group 8
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip 5
        let clip5Path = UIBezierPath(rect: CGRect(x: -13.18, y: -13.18, width: 26.35, height: 26.35))
        var clip5Transformation = CGAffineTransform.identity
        clip5Transformation = clip5Transformation.translatedBy(x: group3.minX + 130.48, y: group3.minY + 37.28)
        clip5Transformation = clip5Transformation.rotated(by: -45 * CGFloat.pi/180)
        clip5Path.apply(clip5Transformation)
        clip5Path.addClip()
        
        
        //// Rectangle 9 Drawing
        context.saveGState()
        context.translateBy(x: group3.minX + 130.48, y: group3.minY + 37.28)
        context.rotate(by: 45 * CGFloat.pi/180)
        
        let rectangle9Path = UIBezierPath(rect: CGRect(x: -18.18, y: -18.18, width: 36.35, height: 36.35))
        fillColor3.setFill()
        rectangle9Path.fill()
        
        context.restoreGState()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Group 9
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip 6
        let clip6Path = UIBezierPath(rect: CGRect(x: -13.18, y: -13.18, width: 26.35, height: 26.35))
        var clip6Transformation = CGAffineTransform.identity
        clip6Transformation = clip6Transformation.translatedBy(x: group3.minX + 111.88, y: group3.minY + 93.18)
        clip6Transformation = clip6Transformation.rotated(by: -45 * CGFloat.pi/180)
        clip6Path.apply(clip6Transformation)
        clip6Path.addClip()
        
        
        //// Rectangle 11 Drawing
        context.saveGState()
        context.translateBy(x: group3.minX + 111.88, y: group3.minY + 93.18)
        context.rotate(by: 45 * CGFloat.pi/180)
        
        let rectangle11Path = UIBezierPath(rect: CGRect(x: -18.18, y: -18.18, width: 36.35, height: 36.35))
        fillColor3.setFill()
        rectangle11Path.fill()
        
        context.restoreGState()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Group 10
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip 7
        let clip7Path = UIBezierPath(rect: CGRect(x: -13.18, y: -13.18, width: 26.35, height: 26.35))
        var clip7Transformation = CGAffineTransform.identity
        clip7Transformation = clip7Transformation.translatedBy(x: group3.minX + 37.28, y: group3.minY + 55.93)
        clip7Transformation = clip7Transformation.rotated(by: 45 * CGFloat.pi/180)
        clip7Path.apply(clip7Transformation)
        clip7Path.addClip()
        
        
        //// Rectangle 13 Drawing
        context.saveGState()
        context.translateBy(x: group3.minX + 37.28, y: group3.minY + 55.93)
        context.rotate(by: -45 * CGFloat.pi/180)
        
        let rectangle13Path = UIBezierPath(rect: CGRect(x: -18.18, y: -18.18, width: 36.35, height: 36.35))
        fillColor6.setFill()
        rectangle13Path.fill()
        
        context.restoreGState()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Group 11
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip 8
        let clip8Path = UIBezierPath(rect: CGRect(x: -13.18, y: -13.18, width: 26.35, height: 26.35))
        var clip8Transformation = CGAffineTransform.identity
        clip8Transformation = clip8Transformation.translatedBy(x: group3.minX + 18.63, y: group3.minY + 74.53)
        clip8Transformation = clip8Transformation.rotated(by: -45 * CGFloat.pi/180)
        clip8Path.apply(clip8Transformation)
        clip8Path.addClip()
        
        
        //// Rectangle 15 Drawing
        context.saveGState()
        context.translateBy(x: group3.minX + 18.63, y: group3.minY + 74.53)
        context.rotate(by: -45 * CGFloat.pi/180)
        
        let rectangle15Path = UIBezierPath(rect: CGRect(x: -18.18, y: -18.18, width: 36.35, height: 36.35))
        fillColor3.setFill()
        rectangle15Path.fill()
        
        context.restoreGState()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Group 12
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip 9
        let clip9Path = UIBezierPath(rect: CGRect(x: -13.18, y: -13.18, width: 26.35, height: 26.35))
        var clip9Transformation = CGAffineTransform.identity
        clip9Transformation = clip9Transformation.translatedBy(x: group3.minX + 55.93, y: group3.minY + 74.53)
        clip9Transformation = clip9Transformation.rotated(by: 45 * CGFloat.pi/180)
        clip9Path.apply(clip9Transformation)
        clip9Path.addClip()
        
        
        //// Rectangle 17 Drawing
        context.saveGState()
        context.translateBy(x: group3.minX + 55.93, y: group3.minY + 74.53)
        context.rotate(by: 45 * CGFloat.pi/180)
        
        let rectangle17Path = UIBezierPath(rect: CGRect(x: -18.18, y: -18.18, width: 36.35, height: 36.35))
        fillColor6.setFill()
        rectangle17Path.fill()
        
        context.restoreGState()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Group 13
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip 10
        let clip10Path = UIBezierPath(rect: CGRect(x: -13.18, y: -13.18, width: 26.35, height: 26.35))
        var clip10Transformation = CGAffineTransform.identity
        clip10Transformation = clip10Transformation.translatedBy(x: group3.minX + 37.28, y: group3.minY + 93.18)
        clip10Transformation = clip10Transformation.rotated(by: 45 * CGFloat.pi/180)
        clip10Path.apply(clip10Transformation)
        clip10Path.addClip()
        
        
        //// Rectangle 19 Drawing
        context.saveGState()
        context.translateBy(x: group3.minX + 37.28, y: group3.minY + 93.18)
        context.rotate(by: -45 * CGFloat.pi/180)
        
        let rectangle19Path = UIBezierPath(rect: CGRect(x: -18.18, y: -18.18, width: 36.35, height: 36.35))
        fillColor4.setFill()
        rectangle19Path.fill()
        
        context.restoreGState()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Group 14
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip 11
        let clip11Path = UIBezierPath(rect: CGRect(x: -13.18, y: -13.18, width: 26.35, height: 26.35))
        var clip11Transformation = CGAffineTransform.identity
        clip11Transformation = clip11Transformation.translatedBy(x: group3.minX + 74.58, y: group3.minY + 18.63)
        clip11Transformation = clip11Transformation.rotated(by: 45 * CGFloat.pi/180)
        clip11Path.apply(clip11Transformation)
        clip11Path.addClip()
        
        
        //// Rectangle 21 Drawing
        context.saveGState()
        context.translateBy(x: group3.minX + 74.58, y: group3.minY + 18.63)
        context.rotate(by: 45 * CGFloat.pi/180)
        
        let rectangle21Path = UIBezierPath(rect: CGRect(x: -18.18, y: -18.18, width: 36.35, height: 36.35))
        fillColor3.setFill()
        rectangle21Path.fill()
        
        context.restoreGState()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Group 15
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip 12
        let clip12Path = UIBezierPath(rect: CGRect(x: -13.18, y: -13.18, width: 26.35, height: 26.35))
        var clip12Transformation = CGAffineTransform.identity
        clip12Transformation = clip12Transformation.translatedBy(x: group3.minX + 55.93, y: group3.minY + 37.28)
        clip12Transformation = clip12Transformation.rotated(by: 45 * CGFloat.pi/180)
        clip12Path.apply(clip12Transformation)
        clip12Path.addClip()
        
        
        //// Rectangle 23 Drawing
        context.saveGState()
        context.translateBy(x: group3.minX + 55.93, y: group3.minY + 37.28)
        context.rotate(by: 45 * CGFloat.pi/180)
        
        let rectangle23Path = UIBezierPath(rect: CGRect(x: -18.18, y: -18.18, width: 36.35, height: 36.35))
        fillColor5.setFill()
        rectangle23Path.fill()
        
        context.restoreGState()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Group 16
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip 13
        let clip13Path = UIBezierPath(rect: CGRect(x: -13.18, y: -13.18, width: 26.35, height: 26.35))
        var clip13Transformation = CGAffineTransform.identity
        clip13Transformation = clip13Transformation.translatedBy(x: group3.minX + 93.23, y: group3.minY + 37.28)
        clip13Transformation = clip13Transformation.rotated(by: 45 * CGFloat.pi/180)
        clip13Path.apply(clip13Transformation)
        clip13Path.addClip()
        
        
        //// Rectangle 25 Drawing
        context.saveGState()
        context.translateBy(x: group3.minX + 93.23, y: group3.minY + 37.28)
        context.rotate(by: 45 * CGFloat.pi/180)
        
        let rectangle25Path = UIBezierPath(rect: CGRect(x: -18.18, y: -18.18, width: 36.35, height: 36.35))
        fillColor7.setFill()
        rectangle25Path.fill()
        
        context.restoreGState()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Group 17
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip 14
        let clip14Path = UIBezierPath(rect: CGRect(x: -13.18, y: -13.18, width: 26.35, height: 26.35))
        var clip14Transformation = CGAffineTransform.identity
        clip14Transformation = clip14Transformation.translatedBy(x: group3.minX + 74.58, y: group3.minY + 55.93)
        clip14Transformation = clip14Transformation.rotated(by: 45 * CGFloat.pi/180)
        clip14Path.apply(clip14Transformation)
        clip14Path.addClip()
        
        
        //// Rectangle 27 Drawing
        context.saveGState()
        context.translateBy(x: group3.minX + 74.58, y: group3.minY + 55.93)
        context.rotate(by: -45 * CGFloat.pi/180)
        
        let rectangle27Path = UIBezierPath(rect: CGRect(x: -18.18, y: -18.18, width: 36.35, height: 36.35))
        fillColor5.setFill()
        rectangle27Path.fill()
        
        context.restoreGState()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
    }



    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
            case .aspectFit:
                scales.width = min(scales.width, scales.height)
                scales.height = scales.width
            case .aspectFill:
                scales.width = max(scales.width, scales.height)
                scales.height = scales.width
            case .stretch:
                break
            case .center:
                scales.width = 1
                scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    public dynamic class func drawLeftArrowBlack(arrow: CGRect = CGRect(x: 3, y: 3, width: 44, height: 44)) {
        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: arrow.minX + 0.77326 * arrow.width, y: arrow.minY + 0.46644 * arrow.height))
        bezierPath.addLine(to: CGPoint(x: arrow.minX + 0.77326 * arrow.width, y: arrow.minY + 0.53356 * arrow.height))
        bezierPath.addLine(to: CGPoint(x: arrow.minX + 0.35778 * arrow.width, y: arrow.minY + 0.53356 * arrow.height))
        bezierPath.addLine(to: CGPoint(x: arrow.minX + 0.54794 * arrow.width, y: arrow.minY + 0.72532 * arrow.height))
        bezierPath.addLine(to: CGPoint(x: arrow.minX + 0.50000 * arrow.width, y: arrow.minY + 0.77326 * arrow.height))
        bezierPath.addLine(to: CGPoint(x: arrow.minX + 0.22674 * arrow.width, y: arrow.minY + 0.50000 * arrow.height))
        bezierPath.addLine(to: CGPoint(x: arrow.minX + 0.50000 * arrow.width, y: arrow.minY + 0.22674 * arrow.height))
        bezierPath.addLine(to: CGPoint(x: arrow.minX + 0.54954 * arrow.width, y: arrow.minY + 0.27468 * arrow.height))
        bezierPath.addLine(to: CGPoint(x: arrow.minX + 0.35778 * arrow.width, y: arrow.minY + 0.46644 * arrow.height))
        bezierPath.addLine(to: CGPoint(x: arrow.minX + 0.77326 * arrow.width, y: arrow.minY + 0.46644 * arrow.height))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
    }

    
    public dynamic class func drawLeftArrow(arrow: CGRect = CGRect(x: 3, y: 3, width: 44, height: 44)) {
        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: arrow.minX + 0.77326 * arrow.width, y: arrow.minY + 0.46644 * arrow.height))
        bezierPath.addLine(to: CGPoint(x: arrow.minX + 0.77326 * arrow.width, y: arrow.minY + 0.53356 * arrow.height))
        bezierPath.addLine(to: CGPoint(x: arrow.minX + 0.35778 * arrow.width, y: arrow.minY + 0.53356 * arrow.height))
        bezierPath.addLine(to: CGPoint(x: arrow.minX + 0.54794 * arrow.width, y: arrow.minY + 0.72532 * arrow.height))
        bezierPath.addLine(to: CGPoint(x: arrow.minX + 0.50000 * arrow.width, y: arrow.minY + 0.77326 * arrow.height))
        bezierPath.addLine(to: CGPoint(x: arrow.minX + 0.22674 * arrow.width, y: arrow.minY + 0.50000 * arrow.height))
        bezierPath.addLine(to: CGPoint(x: arrow.minX + 0.50000 * arrow.width, y: arrow.minY + 0.22674 * arrow.height))
        bezierPath.addLine(to: CGPoint(x: arrow.minX + 0.54954 * arrow.width, y: arrow.minY + 0.27468 * arrow.height))
        bezierPath.addLine(to: CGPoint(x: arrow.minX + 0.35778 * arrow.width, y: arrow.minY + 0.46644 * arrow.height))
        bezierPath.addLine(to: CGPoint(x: arrow.minX + 0.77326 * arrow.width, y: arrow.minY + 0.46644 * arrow.height))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
    }


    public dynamic class func drawSearchMagnifyBlack(magnifyingGlassFrame: CGRect = CGRect(x: 3, y: 3, width: 44, height: 44)) {
        //// Color Declarations
        let white = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: magnifyingGlassFrame.minX + 0.61974 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.57521 * magnifyingGlassFrame.height))
        bezierPath.addLine(to: CGPoint(x: magnifyingGlassFrame.minX + 0.76818 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.72365 * magnifyingGlassFrame.height))
        bezierPath.addLine(to: CGPoint(x: magnifyingGlassFrame.minX + 0.72365 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.76818 * magnifyingGlassFrame.height))
        bezierPath.addLine(to: CGPoint(x: magnifyingGlassFrame.minX + 0.57656 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.61974 * magnifyingGlassFrame.height))
        bezierPath.addLine(to: CGPoint(x: magnifyingGlassFrame.minX + 0.57656 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.59680 * magnifyingGlassFrame.height))
        bezierPath.addLine(to: CGPoint(x: magnifyingGlassFrame.minX + 0.56712 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.58871 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.44162 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.63459 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.53113 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.61929 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.48930 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.63459 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.30600 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.57859 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.38854 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.63459 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.34334 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.61592 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.25000 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.44297 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.26867 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.54125 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.25000 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.49605 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.30600 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.30668 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.25000 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.38989 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.26867 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.34446 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.44027 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.25000 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.34334 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.26889 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.38809 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.25000 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.57589 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.30668 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.49335 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.25000 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.53855 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.26889 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.63189 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.44297 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.61322 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.34446 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.63189 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.38989 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.58601 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.56847 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.63189 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.49065 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.61660 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.53248 * magnifyingGlassFrame.height))
        bezierPath.addLine(to: CGPoint(x: magnifyingGlassFrame.minX + 0.59545 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.57521 * magnifyingGlassFrame.height))
        bezierPath.addLine(to: CGPoint(x: magnifyingGlassFrame.minX + 0.61974 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.57521 * magnifyingGlassFrame.height))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: magnifyingGlassFrame.minX + 0.44162 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.57521 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.53608 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.53675 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.47850 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.57521 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.50999 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.56239 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.57521 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.44297 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.56217 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.51111 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.57521 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.47985 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.53608 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.34851 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.57521 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.40608 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.56217 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.37460 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.44162 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.30937 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.50999 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.32242 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.47850 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.30937 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.34783 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.34851 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.40473 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.30937 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.37347 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.32242 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.30938 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.44297 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.32219 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.37460 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.30938 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.40608 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.34783 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.53675 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.30938 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.47985 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.32219 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.51111 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.44162 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.57521 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.37347 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.56239 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.40473 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.57521 * magnifyingGlassFrame.height))
        bezierPath.addLine(to: CGPoint(x: magnifyingGlassFrame.minX + 0.44162 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.57521 * magnifyingGlassFrame.height))
        bezierPath.close()
        white.setFill()
        bezierPath.fill()
    }
    
    public dynamic class func drawSearchMagnifyBackGround(magnifyingGlassFrame: CGRect = CGRect(x: 3, y: 3, width: 44, height: 44)) {
        //// Color Declarations
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let fillColor15 = UIColor(red: 0.937, green: 0.937, blue: 0.937, alpha: 1.000)
        
        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: magnifyingGlassFrame.minX + 0.50000 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.91588 * magnifyingGlassFrame.height))
        bezier2Path.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.91588 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.50000 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.72969 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.91588 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.91588 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.72969 * magnifyingGlassFrame.height))
        bezier2Path.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.50000 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.08412 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.91588 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.27031 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.72969 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.08412 * magnifyingGlassFrame.height))
        bezier2Path.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.08412 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.50000 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.27031 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.08412 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.08412 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.27031 * magnifyingGlassFrame.height))
        bezier2Path.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.50000 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.91588 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.08412 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.72969 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.27031 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.91588 * magnifyingGlassFrame.height))
        bezier2Path.close()
        fillColor15.setFill()
        bezier2Path.fill()
        
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: magnifyingGlassFrame.minX + 0.59124 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.55452 * magnifyingGlassFrame.height))
        bezierPath.addLine(to: CGPoint(x: magnifyingGlassFrame.minX + 0.71364 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.67692 * magnifyingGlassFrame.height))
        bezierPath.addLine(to: CGPoint(x: magnifyingGlassFrame.minX + 0.67692 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.71364 * magnifyingGlassFrame.height))
        bezierPath.addLine(to: CGPoint(x: magnifyingGlassFrame.minX + 0.55563 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.59124 * magnifyingGlassFrame.height))
        bezierPath.addLine(to: CGPoint(x: magnifyingGlassFrame.minX + 0.55563 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.57232 * magnifyingGlassFrame.height))
        bezierPath.addLine(to: CGPoint(x: magnifyingGlassFrame.minX + 0.54785 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.56565 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.44437 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.60348 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.51817 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.59087 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.48368 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.60348 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.33254 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.55730 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.40060 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.60348 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.36332 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.58809 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.28636 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.44548 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.30176 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.52652 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.28636 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.48924 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.33254 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.33310 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.28636 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.40171 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.30176 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.36425 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.44325 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.28636 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.36332 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.30194 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.40023 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.28636 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.55508 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.33310 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.48702 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.28636 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.52429 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.30194 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.60125 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.44548 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.58586 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.36425 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.60125 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.40171 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.56342 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.54896 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.60125 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.48479 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.58864 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.51929 * magnifyingGlassFrame.height))
        bezierPath.addLine(to: CGPoint(x: magnifyingGlassFrame.minX + 0.57121 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.55452 * magnifyingGlassFrame.height))
        bezierPath.addLine(to: CGPoint(x: magnifyingGlassFrame.minX + 0.59124 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.55452 * magnifyingGlassFrame.height))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: magnifyingGlassFrame.minX + 0.44437 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.55452 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.52225 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.52281 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.47478 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.55452 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.50074 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.54395 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.55452 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.44548 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.54377 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.50167 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.55452 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.47589 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.52225 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.36759 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.55452 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.41506 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.54377 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.38910 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.44437 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.33532 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.50074 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.34608 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.47478 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.33532 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.36703 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.36759 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.41395 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.33532 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.38817 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.34608 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.33532 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.44548 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.34589 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.38910 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.33532 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.41506 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.36703 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.52281 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.33532 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.47589 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.34589 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.50167 * magnifyingGlassFrame.height))
        bezierPath.addCurve(to: CGPoint(x: magnifyingGlassFrame.minX + 0.44437 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.55452 * magnifyingGlassFrame.height), controlPoint1: CGPoint(x: magnifyingGlassFrame.minX + 0.38817 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.54395 * magnifyingGlassFrame.height), controlPoint2: CGPoint(x: magnifyingGlassFrame.minX + 0.41395 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.55452 * magnifyingGlassFrame.height))
        bezierPath.addLine(to: CGPoint(x: magnifyingGlassFrame.minX + 0.44437 * magnifyingGlassFrame.width, y: magnifyingGlassFrame.minY + 0.55452 * magnifyingGlassFrame.height))
        bezierPath.close()
        white.setFill()
        bezierPath.fill()
    }
    
    public dynamic class func drawSliderCircleArrows(arrow: CGRect = CGRect(x: 3, y: 3, width: 44, height: 44)) {
        //// General Declarations
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }
        
        //// Color Declarations
        let fillColor16 = UIColor(red: 0.831, green: 0.004, blue: 0.224, alpha: 1.000)
        
        
        //// Subframes
        let group2: CGRect = CGRect(x: arrow.minX + fastFloor(arrow.width * 0.27471 + 0.41) + 0.09, y: arrow.minY + fastFloor(arrow.height * 0.36838 + 0.29) + 0.21, width: fastFloor(arrow.width * 0.72529 - 0.41) - fastFloor(arrow.width * 0.27471 + 0.41) + 0.83, height: fastFloor(arrow.height * 0.63162 - 0.29) - fastFloor(arrow.height * 0.36838 + 0.29) + 0.58)
        
        
        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: group2.minX + 0.88817 * group2.width, y: group2.minY + 0.49918 * group2.height))
        bezierPath.addLine(to: CGPoint(x: group2.minX + 0.67100 * group2.width, y: group2.minY + 0.11189 * group2.height))
        bezierPath.addCurve(to: CGPoint(x: group2.minX + 0.67100 * group2.width, y: group2.minY + 0.07627 * group2.height), controlPoint1: CGPoint(x: group2.minX + 0.66407 * group2.width, y: group2.minY + 0.10001 * group2.height), controlPoint2: CGPoint(x: group2.minX + 0.66407 * group2.width, y: group2.minY + 0.08814 * group2.height))
        bezierPath.addLine(to: CGPoint(x: group2.minX + 0.71001 * group2.width, y: group2.minY + 0.00950 * group2.height))
        bezierPath.addCurve(to: CGPoint(x: group2.minX + 0.73082 * group2.width, y: group2.minY + 0.00727 * group2.height), controlPoint1: CGPoint(x: group2.minX + 0.71782 * group2.width, y: group2.minY + -0.00237 * group2.height), controlPoint2: CGPoint(x: group2.minX + 0.72475 * group2.width, y: group2.minY + -0.00312 * group2.height))
        bezierPath.addLine(to: CGPoint(x: group2.minX + 0.99610 * group2.width, y: group2.minY + 0.48138 * group2.height))
        bezierPath.addCurve(to: CGPoint(x: group2.minX + 1.00000 * group2.width, y: group2.minY + 0.49918 * group2.height), controlPoint1: CGPoint(x: group2.minX + 0.99870 * group2.width, y: group2.minY + 0.48583 * group2.height), controlPoint2: CGPoint(x: group2.minX + 1.00000 * group2.width, y: group2.minY + 0.49176 * group2.height))
        bezierPath.addCurve(to: CGPoint(x: group2.minX + 0.99610 * group2.width, y: group2.minY + 0.51699 * group2.height), controlPoint1: CGPoint(x: group2.minX + 1.00000 * group2.width, y: group2.minY + 0.50660 * group2.height), controlPoint2: CGPoint(x: group2.minX + 0.99870 * group2.width, y: group2.minY + 0.51254 * group2.height))
        bezierPath.addLine(to: CGPoint(x: group2.minX + 0.73082 * group2.width, y: group2.minY + 0.99110 * group2.height))
        bezierPath.addCurve(to: CGPoint(x: group2.minX + 0.71001 * group2.width, y: group2.minY + 0.99110 * group2.height), controlPoint1: CGPoint(x: group2.minX + 0.72388 * group2.width, y: group2.minY + 1.00297 * group2.height), controlPoint2: CGPoint(x: group2.minX + 0.71695 * group2.width, y: group2.minY + 1.00297 * group2.height))
        bezierPath.addLine(to: CGPoint(x: group2.minX + 0.67100 * group2.width, y: group2.minY + 0.92210 * group2.height))
        bezierPath.addCurve(to: CGPoint(x: group2.minX + 0.67100 * group2.width, y: group2.minY + 0.88648 * group2.height), controlPoint1: CGPoint(x: group2.minX + 0.66407 * group2.width, y: group2.minY + 0.91022 * group2.height), controlPoint2: CGPoint(x: group2.minX + 0.66407 * group2.width, y: group2.minY + 0.89835 * group2.height))
        bezierPath.addLine(to: CGPoint(x: group2.minX + 0.88817 * group2.width, y: group2.minY + 0.49918 * group2.height))
        bezierPath.close()
        fillColor16.setFill()
        bezierPath.fill()
        
        
        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: group2.minX + 0.11183 * group2.width, y: group2.minY + 0.49918 * group2.height))
        bezier2Path.addLine(to: CGPoint(x: group2.minX + 0.32900 * group2.width, y: group2.minY + 0.11189 * group2.height))
        bezier2Path.addCurve(to: CGPoint(x: group2.minX + 0.32900 * group2.width, y: group2.minY + 0.07627 * group2.height), controlPoint1: CGPoint(x: group2.minX + 0.33593 * group2.width, y: group2.minY + 0.10001 * group2.height), controlPoint2: CGPoint(x: group2.minX + 0.33593 * group2.width, y: group2.minY + 0.08814 * group2.height))
        bezier2Path.addLine(to: CGPoint(x: group2.minX + 0.28999 * group2.width, y: group2.minY + 0.00950 * group2.height))
        bezier2Path.addCurve(to: CGPoint(x: group2.minX + 0.26918 * group2.width, y: group2.minY + 0.00727 * group2.height), controlPoint1: CGPoint(x: group2.minX + 0.28218 * group2.width, y: group2.minY + -0.00237 * group2.height), controlPoint2: CGPoint(x: group2.minX + 0.27525 * group2.width, y: group2.minY + -0.00312 * group2.height))
        bezier2Path.addLine(to: CGPoint(x: group2.minX + 0.00390 * group2.width, y: group2.minY + 0.48138 * group2.height))
        bezier2Path.addCurve(to: CGPoint(x: group2.minX + 0.00000 * group2.width, y: group2.minY + 0.49918 * group2.height), controlPoint1: CGPoint(x: group2.minX + 0.00130 * group2.width, y: group2.minY + 0.48583 * group2.height), controlPoint2: CGPoint(x: group2.minX + 0.00000 * group2.width, y: group2.minY + 0.49176 * group2.height))
        bezier2Path.addCurve(to: CGPoint(x: group2.minX + 0.00390 * group2.width, y: group2.minY + 0.51699 * group2.height), controlPoint1: CGPoint(x: group2.minX + 0.00000 * group2.width, y: group2.minY + 0.50660 * group2.height), controlPoint2: CGPoint(x: group2.minX + 0.00130 * group2.width, y: group2.minY + 0.51254 * group2.height))
        bezier2Path.addLine(to: CGPoint(x: group2.minX + 0.26918 * group2.width, y: group2.minY + 0.99110 * group2.height))
        bezier2Path.addCurve(to: CGPoint(x: group2.minX + 0.28999 * group2.width, y: group2.minY + 0.99110 * group2.height), controlPoint1: CGPoint(x: group2.minX + 0.27612 * group2.width, y: group2.minY + 1.00297 * group2.height), controlPoint2: CGPoint(x: group2.minX + 0.28305 * group2.width, y: group2.minY + 1.00297 * group2.height))
        bezier2Path.addLine(to: CGPoint(x: group2.minX + 0.32900 * group2.width, y: group2.minY + 0.92210 * group2.height))
        bezier2Path.addCurve(to: CGPoint(x: group2.minX + 0.32900 * group2.width, y: group2.minY + 0.88648 * group2.height), controlPoint1: CGPoint(x: group2.minX + 0.33593 * group2.width, y: group2.minY + 0.91022 * group2.height), controlPoint2: CGPoint(x: group2.minX + 0.33593 * group2.width, y: group2.minY + 0.89835 * group2.height))
        bezier2Path.addLine(to: CGPoint(x: group2.minX + 0.11183 * group2.width, y: group2.minY + 0.49918 * group2.height))
        bezier2Path.close()
        fillColor16.setFill()
        bezier2Path.fill()
    }
}
